
i2ctest.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
   0:	0150006f          	j	814 <handle_reset>
   4:	00000000          	.word	0x00000000
   8:	00000896          	.word	0x00000896
   c:	00000894          	.word	0x00000894
	...
  30:	00000894          	.word	0x00000894
  34:	00000000          	.word	0x00000000
  38:	00000894          	.word	0x00000894
  3c:	00000000          	.word	0x00000000
  40:	00000894          	.word	0x00000894
  44:	00000894          	.word	0x00000894
  48:	00000894          	.word	0x00000894
  4c:	00000894          	.word	0x00000894
  50:	00000894          	.word	0x00000894
  54:	00000894          	.word	0x00000894
  58:	00000894          	.word	0x00000894
  5c:	00000894          	.word	0x00000894
  60:	00000894          	.word	0x00000894
  64:	00000894          	.word	0x00000894
  68:	00000894          	.word	0x00000894
  6c:	00000894          	.word	0x00000894
  70:	00000894          	.word	0x00000894
  74:	00000894          	.word	0x00000894
  78:	00000894          	.word	0x00000894
  7c:	00000894          	.word	0x00000894
  80:	00000894          	.word	0x00000894
  84:	00000894          	.word	0x00000894
  88:	00000894          	.word	0x00000894
  8c:	00000894          	.word	0x00000894
  90:	00000894          	.word	0x00000894
  94:	00000894          	.word	0x00000894
  98:	00000894          	.word	0x00000894
  9c:	0000                	.insn	2, 0x
	...

Disassembly of section .text:

000000a0 <__divsi3>:
  a0:	02054e63          	bltz	a0,dc <__umodsi3+0x8>
  a4:	0405c363          	bltz	a1,ea <__umodsi3+0x16>

000000a8 <__hidden___udivsi3>:
  a8:	862e                	mv	a2,a1
  aa:	85aa                	mv	a1,a0
  ac:	557d                	li	a0,-1
  ae:	c215                	beqz	a2,d2 <__hidden___udivsi3+0x2a>
  b0:	4685                	li	a3,1
  b2:	00b67863          	bgeu	a2,a1,c2 <__hidden___udivsi3+0x1a>
  b6:	00c05663          	blez	a2,c2 <__hidden___udivsi3+0x1a>
  ba:	0606                	slli	a2,a2,0x1
  bc:	0686                	slli	a3,a3,0x1
  be:	feb66ce3          	bltu	a2,a1,b6 <__hidden___udivsi3+0xe>
  c2:	4501                	li	a0,0
  c4:	00c5e463          	bltu	a1,a2,cc <__hidden___udivsi3+0x24>
  c8:	8d91                	sub	a1,a1,a2
  ca:	8d55                	or	a0,a0,a3
  cc:	8285                	srli	a3,a3,0x1
  ce:	8205                	srli	a2,a2,0x1
  d0:	faf5                	bnez	a3,c4 <__hidden___udivsi3+0x1c>
  d2:	8082                	ret

000000d4 <__umodsi3>:
  d4:	8286                	mv	t0,ra
  d6:	3fc9                	jal	a8 <__hidden___udivsi3>
  d8:	852e                	mv	a0,a1
  da:	8282                	jr	t0
  dc:	40a00533          	neg	a0,a0
  e0:	00b04763          	bgtz	a1,ee <__umodsi3+0x1a>
  e4:	40b005b3          	neg	a1,a1
  e8:	b7c1                	j	a8 <__hidden___udivsi3>
  ea:	40b005b3          	neg	a1,a1
  ee:	8286                	mv	t0,ra
  f0:	3f65                	jal	a8 <__hidden___udivsi3>
  f2:	40a00533          	neg	a0,a0
  f6:	8282                	jr	t0

000000f8 <__modsi3>:
  f8:	8286                	mv	t0,ra
  fa:	0005c763          	bltz	a1,108 <__modsi3+0x10>
  fe:	00054963          	bltz	a0,110 <__modsi3+0x18>
 102:	375d                	jal	a8 <__hidden___udivsi3>
 104:	852e                	mv	a0,a1
 106:	8282                	jr	t0
 108:	40b005b3          	neg	a1,a1
 10c:	fe055be3          	bgez	a0,102 <__modsi3+0xa>
 110:	40a00533          	neg	a0,a0
 114:	3f51                	jal	a8 <__hidden___udivsi3>
 116:	40b00533          	neg	a0,a1
 11a:	8282                	jr	t0
	...

0000011e <mini_pad>:
 11e:	1131                	addi	sp,sp,-20
 120:	c426                	sw	s1,8(sp)
 122:	c806                	sw	ra,16(sp)
 124:	c622                	sw	s0,12(sp)
 126:	84ae                	mv	s1,a1
 128:	87aa                	mv	a5,a0
 12a:	85b2                	mv	a1,a2
 12c:	c699                	beqz	a3,13a <mini_pad+0x1c>
 12e:	4301                	li	t1,0
 130:	0096d763          	bge	a3,s1,13e <mini_pad+0x20>
 134:	84b6                	mv	s1,a3
 136:	4305                	li	t1,1
 138:	a019                	j	13e <mini_pad+0x20>
 13a:	4301                	li	t1,0
 13c:	86a6                	mv	a3,s1
 13e:	40968433          	sub	s0,a3,s1
 142:	00045363          	bgez	s0,148 <mini_pad+0x2a>
 146:	4401                	li	s0,0
 148:	8622                	mv	a2,s0
 14a:	853a                	mv	a0,a4
 14c:	c23e                	sw	a5,4(sp)
 14e:	c01a                	sw	t1,0(sp)
 150:	151000ef          	jal	aa0 <memset>
 154:	4302                	lw	t1,0(sp)
 156:	4792                	lw	a5,4(sp)
 158:	872a                	mv	a4,a0
 15a:	008506b3          	add	a3,a0,s0
 15e:	4601                	li	a2,0
 160:	40c485b3          	sub	a1,s1,a2
 164:	04b04263          	bgtz	a1,1a8 <mini_pad+0x8a>
 168:	0004d363          	bgez	s1,16e <mini_pad+0x50>
 16c:	4481                	li	s1,0
 16e:	009685b3          	add	a1,a3,s1
 172:	40e58533          	sub	a0,a1,a4
 176:	02030463          	beqz	t1,19e <mini_pad+0x80>
 17a:	02b77263          	bgeu	a4,a1,19e <mini_pad+0x80>
 17e:	02a00793          	li	a5,42
 182:	fef58fa3          	sb	a5,-1(a1)
 186:	fff58693          	addi	a3,a1,-1
 18a:	00d77a63          	bgeu	a4,a3,19e <mini_pad+0x80>
 18e:	fef58f23          	sb	a5,-2(a1)
 192:	ffe58693          	addi	a3,a1,-2
 196:	00d77463          	bgeu	a4,a3,19e <mini_pad+0x80>
 19a:	fef58ea3          	sb	a5,-3(a1)
 19e:	40c2                	lw	ra,16(sp)
 1a0:	4432                	lw	s0,12(sp)
 1a2:	44a2                	lw	s1,8(sp)
 1a4:	0151                	addi	sp,sp,20
 1a6:	8082                	ret
 1a8:	00c785b3          	add	a1,a5,a2
 1ac:	0005c503          	lbu	a0,0(a1)
 1b0:	00c685b3          	add	a1,a3,a2
 1b4:	0605                	addi	a2,a2,1
 1b6:	00a58023          	sb	a0,0(a1)
 1ba:	b75d                	j	160 <mini_pad+0x42>

000001bc <mini_itoa.part.0>:
 1bc:	1101                	addi	sp,sp,-32
 1be:	ce06                	sw	ra,28(sp)
 1c0:	cc22                	sw	s0,24(sp)
 1c2:	ca26                	sw	s1,20(sp)
 1c4:	c002                	sw	zero,0(sp)
 1c6:	832a                	mv	t1,a0
 1c8:	00055763          	bgez	a0,1d6 <mini_itoa.part.0+0x1a>
 1cc:	e689                	bnez	a3,1d6 <mini_itoa.part.0+0x1a>
 1ce:	4785                	li	a5,1
 1d0:	40a00333          	neg	t1,a0
 1d4:	c03e                	sw	a5,0(sp)
 1d6:	8a05                	andi	a2,a2,1
 1d8:	06100413          	li	s0,97
 1dc:	c219                	beqz	a2,1e2 <mini_itoa.part.0+0x26>
 1de:	04100413          	li	s0,65
 1e2:	84ba                	mv	s1,a4
 1e4:	1459                	addi	s0,s0,-10
 1e6:	851a                	mv	a0,t1
 1e8:	c83a                	sw	a4,16(sp)
 1ea:	c21a                	sw	t1,4(sp)
 1ec:	c62e                	sw	a1,12(sp)
 1ee:	c41a                	sw	t1,8(sp)
 1f0:	35d5                	jal	d4 <__umodsi3>
 1f2:	47a5                	li	a5,9
 1f4:	4322                	lw	t1,8(sp)
 1f6:	45b2                	lw	a1,12(sp)
 1f8:	4742                	lw	a4,16(sp)
 1fa:	0ff57693          	zext.b	a3,a0
 1fe:	06a7e163          	bltu	a5,a0,260 <mini_itoa.part.0+0xa4>
 202:	03068693          	addi	a3,a3,48
 206:	0ff6f693          	zext.b	a3,a3
 20a:	00148793          	addi	a5,s1,1
 20e:	00d48023          	sb	a3,0(s1)
 212:	851a                	mv	a0,t1
 214:	c83a                	sw	a4,16(sp)
 216:	c63e                	sw	a5,12(sp)
 218:	c42e                	sw	a1,8(sp)
 21a:	3579                	jal	a8 <__hidden___udivsi3>
 21c:	4692                	lw	a3,4(sp)
 21e:	45a2                	lw	a1,8(sp)
 220:	47b2                	lw	a5,12(sp)
 222:	4742                	lw	a4,16(sp)
 224:	832a                	mv	t1,a0
 226:	02b6fb63          	bgeu	a3,a1,25c <mini_itoa.part.0+0xa0>
 22a:	4682                	lw	a3,0(sp)
 22c:	c699                	beqz	a3,23a <mini_itoa.part.0+0x7e>
 22e:	02d00693          	li	a3,45
 232:	00d78023          	sb	a3,0(a5)
 236:	00248793          	addi	a5,s1,2
 23a:	40e78533          	sub	a0,a5,a4
 23e:	01f55693          	srli	a3,a0,0x1f
 242:	96aa                	add	a3,a3,a0
 244:	00078023          	sb	zero,0(a5)
 248:	8685                	srai	a3,a3,0x1
 24a:	4601                	li	a2,0
 24c:	17fd                	addi	a5,a5,-1
 24e:	00d64b63          	blt	a2,a3,264 <mini_itoa.part.0+0xa8>
 252:	40f2                	lw	ra,28(sp)
 254:	4462                	lw	s0,24(sp)
 256:	44d2                	lw	s1,20(sp)
 258:	6105                	addi	sp,sp,32
 25a:	8082                	ret
 25c:	84be                	mv	s1,a5
 25e:	b761                	j	1e6 <mini_itoa.part.0+0x2a>
 260:	96a2                	add	a3,a3,s0
 262:	b755                	j	206 <mini_itoa.part.0+0x4a>
 264:	00c705b3          	add	a1,a4,a2
 268:	0007c283          	lbu	t0,0(a5)
 26c:	0005c303          	lbu	t1,0(a1)
 270:	0605                	addi	a2,a2,1
 272:	00558023          	sb	t0,0(a1)
 276:	00678023          	sb	t1,0(a5)
 27a:	bfc9                	j	24c <mini_itoa.part.0+0x90>

0000027c <clk_stretch>:
{
	// Make array of uint8_t from [pin] enum. See definition for details
	uint8_t *byte = (uint8_t *)&pin;

	// If the Input Reg has the wanted bit set, return HIGH
	if( (gpio_port_reg[ byte[0] ]->INDR & (0x01 << byte[1])) != 0x00 ) 
 27c:	0ff57713          	zext.b	a4,a0
 280:	6785                	lui	a5,0x1
 282:	070a                	slli	a4,a4,0x2
 284:	d8078793          	addi	a5,a5,-640 # d80 <gpio_port_reg>
 288:	97ba                	add	a5,a5,a4
 28a:	8121                	srli	a0,a0,0x8
 28c:	4705                	li	a4,1
 28e:	4390                	lw	a2,0(a5)
 290:	00a71733          	sll	a4,a4,a0
}

static i2c_err_t clk_stretch(const gpio_pin_t scl)
{
	uint8_t clock_waits = 10;
	while(gpio_digital_read(scl) == GPIO_LOW)
 294:	47ad                	li	a5,11
	if( (gpio_port_reg[ byte[0] ]->INDR & (0x01 << byte[1])) != 0x00 ) 
 296:	4614                	lw	a3,8(a2)
 298:	8ef9                	and	a3,a3,a4
 29a:	e699                	bnez	a3,2a8 <clk_stretch+0x2c>
	{
		if(!clock_waits--) return I2C_ERR_TIMEOUT;
 29c:	17fd                	addi	a5,a5,-1
 29e:	0ff7f793          	zext.b	a5,a5
 2a2:	fbf5                	bnez	a5,296 <clk_stretch+0x1a>
 2a4:	4505                	li	a0,1
 2a6:	8082                	ret
		wait();
	}

	return I2C_OK;
 2a8:	4501                	li	a0,0
}
 2aa:	8082                	ret

000002ac <swi2c_master_rx_byte.constprop.0>:
	}

	return stat;
}

uint8_t swi2c_master_rx_byte(i2c_device_t *i2c, bool ack)
 2ac:	fc810113          	addi	sp,sp,-56
	uint8_t byte = 0x00;
	while(index--) 
	{
		// Release the SDA pin so the slave can set data, then release SCL
		// to request data
		RELEASE_SDA;
 2b0:	200003b7          	lui	t2,0x20000
uint8_t swi2c_master_rx_byte(i2c_device_t *i2c, bool ack)
 2b4:	da06                	sw	ra,52(sp)
 2b6:	d822                	sw	s0,48(sp)
 2b8:	d626                	sw	s1,44(sp)
 2ba:	c62a                	sw	a0,12(sp)
 2bc:	4321                	li	t1,8
	uint8_t byte = 0x00;
 2be:	4701                	li	a4,0
		RELEASE_SDA;
 2c0:	00038393          	mv	t2,t2
 2c4:	0043a603          	lw	a2,4(t2) # 20000004 <dev+0x4>
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 2c8:	6785                	lui	a5,0x1
 2ca:	d8078793          	addi	a5,a5,-640 # d80 <gpio_port_reg>
 2ce:	0ff67693          	zext.b	a3,a2
 2d2:	8221                	srli	a2,a2,0x8
 2d4:	0ff67613          	zext.b	a2,a2
 2d8:	068a                	slli	a3,a3,0x2
 2da:	00261293          	slli	t0,a2,0x2
 2de:	96be                	add	a3,a3,a5
 2e0:	443d                	li	s0,15
 2e2:	4294                	lw	a3,0(a3)
 2e4:	005415b3          	sll	a1,s0,t0
 2e8:	d43a                	sw	a4,40(sp)
 2ea:	fff5c713          	not	a4,a1
		| (mode << (4 * byte[1]));
 2ee:	4591                	li	a1,4
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 2f0:	c23a                	sw	a4,4(sp)
		| (mode << (4 * byte[1]));
 2f2:	00559733          	sll	a4,a1,t0
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 2f6:	4288                	lw	a0,0(a3)
		| (mode << (4 * byte[1]));
 2f8:	c43a                	sw	a4,8(sp)
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 2fa:	4712                	lw	a4,4(sp)
 2fc:	d21a                	sw	t1,36(sp)
		| (mode << (4 * byte[1]));
 2fe:	ce16                	sw	t0,28(sp)
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 300:	8d79                	and	a0,a0,a4
		| (mode << (4 * byte[1]));
 302:	4722                	lw	a4,8(sp)
	gpio_port_reg[byte[0]]->CFGLR = 
 304:	cc36                	sw	a3,24(sp)
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 306:	d032                	sw	a2,32(sp)
		| (mode << (4 * byte[1]));
 308:	8d59                	or	a0,a0,a4
		RELEASE_SCL;
 30a:	0003a703          	lw	a4,0(t2)
	gpio_port_reg[byte[0]]->CFGLR = 
 30e:	c288                	sw	a0,0(a3)
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 310:	0ff77513          	zext.b	a0,a4
 314:	050a                	slli	a0,a0,0x2
 316:	97aa                	add	a5,a5,a0
 318:	4384                	lw	s1,0(a5)
 31a:	00675793          	srli	a5,a4,0x6
 31e:	3fc7f793          	andi	a5,a5,1020
 322:	4088                	lw	a0,0(s1)
 324:	00f41433          	sll	s0,s0,a5
 328:	fff44413          	not	s0,s0
		| (mode << (4 * byte[1]));
 32c:	00f595b3          	sll	a1,a1,a5
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 330:	8d61                	and	a0,a0,s0
		| (mode << (4 * byte[1]));
 332:	8d4d                	or	a0,a0,a1
	gpio_port_reg[byte[0]]->CFGLR = 
 334:	c088                	sw	a0,0(s1)

		// Wait for clk stretch, Only read pin if it's OK
		if(clk_stretch(i2c->pin_scl) == I2C_OK)
 336:	853a                	mv	a0,a4
		RELEASE_SCL;
 338:	c03a                	sw	a4,0(sp)
		| (mode << (4 * byte[1]));
 33a:	ca3e                	sw	a5,20(sp)
 33c:	c82e                	sw	a1,16(sp)
		if(clk_stretch(i2c->pin_scl) == I2C_OK)
 33e:	3f3d                	jal	27c <clk_stretch>
 340:	20000737          	lui	a4,0x20000
 344:	00070393          	mv	t2,a4
 348:	45c2                	lw	a1,16(sp)
 34a:	47d2                	lw	a5,20(sp)
 34c:	46e2                	lw	a3,24(sp)
 34e:	42f2                	lw	t0,28(sp)
 350:	5312                	lw	t1,36(sp)
 352:	5722                	lw	a4,40(sp)
 354:	ed09                	bnez	a0,36e <swi2c_master_rx_byte.constprop.0+0xc2>
	if( (gpio_port_reg[ byte[0] ]->INDR & (0x01 << byte[1])) != 0x00 ) 
 356:	5602                	lw	a2,32(sp)
 358:	4688                	lw	a0,8(a3)
 35a:	4085                	li	ra,1
 35c:	00c09633          	sll	a2,ra,a2
		{
			// Shift the byte by 1
			byte = byte << 1;
 360:	0706                	slli	a4,a4,0x1
	if( (gpio_port_reg[ byte[0] ]->INDR & (0x01 << byte[1])) != 0x00 ) 
 362:	8e69                	and	a2,a2,a0
			byte = byte << 1;
 364:	0ff77713          	zext.b	a4,a4
	if( (gpio_port_reg[ byte[0] ]->INDR & (0x01 << byte[1])) != 0x00 ) 
 368:	c219                	beqz	a2,36e <swi2c_master_rx_byte.constprop.0+0xc2>
			// If SDA is HIGH, set the LSB to 1
			if(gpio_digital_read(i2c->pin_sda)) byte |= 0x01;
 36a:	00176713          	ori	a4,a4,1
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 36e:	4090                	lw	a2,0(s1)
		| (mode << (4 * byte[1]));
 370:	4505                	li	a0,1
 372:	00f517b3          	sll	a5,a0,a5
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 376:	8e61                	and	a2,a2,s0
		| (mode << (4 * byte[1]));
 378:	8e5d                	or	a2,a2,a5
	while(index--) 
 37a:	137d                	addi	t1,t1,-1
	gpio_port_reg[byte[0]]->CFGLR = 
 37c:	c090                	sw	a2,0(s1)
	while(index--) 
 37e:	0ff37313          	zext.b	t1,t1
 382:	f40311e3          	bnez	t1,2c4 <swi2c_master_rx_byte.constprop.0+0x18>
		// SCL LOW for next loop
		ASSERT_SCL;
	}

	// Write ACK Bit, ACK (0) = Read More,  NACK (1) = Stop Reading
	if(ack) { RELEASE_SDA; } else { ASSERT_SDA; }
 386:	4632                	lw	a2,12(sp)
 388:	ce05                	beqz	a2,3c0 <swi2c_master_rx_byte.constprop.0+0x114>
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 38a:	4512                	lw	a0,4(sp)
 38c:	4290                	lw	a2,0(a3)
 38e:	8e69                	and	a2,a2,a0
		| (mode << (4 * byte[1]));
 390:	4522                	lw	a0,8(sp)
 392:	8e49                	or	a2,a2,a0
	gpio_port_reg[byte[0]]->CFGLR = 
 394:	c290                	sw	a2,0(a3)
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 396:	4094                	lw	a3,0(s1)
	wait();
	RELEASE_SCL;   // SCL HIGH
	wait();
	// Clock stretch, wait for SCL to go LOW
	clk_stretch(i2c->pin_scl);
 398:	4502                	lw	a0,0(sp)
 39a:	c43a                	sw	a4,8(sp)
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 39c:	8ee1                	and	a3,a3,s0
		| (mode << (4 * byte[1]));
 39e:	8ecd                	or	a3,a3,a1
	gpio_port_reg[byte[0]]->CFGLR = 
 3a0:	c094                	sw	a3,0(s1)
 3a2:	c23e                	sw	a5,4(sp)
	clk_stretch(i2c->pin_scl);
 3a4:	3de1                	jal	27c <clk_stretch>
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 3a6:	4094                	lw	a3,0(s1)
		| (mode << (4 * byte[1]));
 3a8:	4792                	lw	a5,4(sp)
	ASSERT_SCL;    // SCL LOW
	
	return byte;
}
 3aa:	4722                	lw	a4,8(sp)
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 3ac:	8c75                	and	s0,s0,a3
		| (mode << (4 * byte[1]));
 3ae:	8c5d                	or	s0,s0,a5
	gpio_port_reg[byte[0]]->CFGLR = 
 3b0:	c080                	sw	s0,0(s1)
}
 3b2:	50d2                	lw	ra,52(sp)
 3b4:	5442                	lw	s0,48(sp)
 3b6:	54b2                	lw	s1,44(sp)
 3b8:	853a                	mv	a0,a4
 3ba:	03810113          	addi	sp,sp,56
 3be:	8082                	ret
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 3c0:	4290                	lw	a2,0(a3)
 3c2:	4312                	lw	t1,4(sp)
		| (mode << (4 * byte[1]));
 3c4:	00551533          	sll	a0,a0,t0
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 3c8:	00c37633          	and	a2,t1,a2
 3cc:	b7d9                	j	392 <swi2c_master_rx_byte.constprop.0+0xe6>

000003ce <swi2c_master_tx_byte.constprop.0>:
i2c_err_t swi2c_master_tx_byte(i2c_device_t *i2c, uint8_t data)
 3ce:	7179                	addi	sp,sp,-48
 3d0:	d606                	sw	ra,44(sp)
 3d2:	d422                	sw	s0,40(sp)
 3d4:	d226                	sw	s1,36(sp)
 3d6:	862a                	mv	a2,a0
 3d8:	4321                	li	t1,8
		if(bit) { RELEASE_SDA; } else { ASSERT_SDA; }
 3da:	20000537          	lui	a0,0x20000
 3de:	00050793          	mv	a5,a0
 3e2:	43d8                	lw	a4,4(a5)
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 3e4:	6785                	lui	a5,0x1
 3e6:	d8078693          	addi	a3,a5,-640 # d80 <gpio_port_reg>
 3ea:	0ff77593          	zext.b	a1,a4
 3ee:	8321                	srli	a4,a4,0x8
 3f0:	0ff77713          	zext.b	a4,a4
 3f4:	00271393          	slli	t2,a4,0x2
 3f8:	c43a                	sw	a4,8(sp)
 3fa:	473d                	li	a4,15
 3fc:	00771733          	sll	a4,a4,t2
 400:	058a                	slli	a1,a1,0x2
 402:	fff74293          	not	t0,a4
		if(bit) { RELEASE_SDA; } else { ASSERT_SDA; }
 406:	01861713          	slli	a4,a2,0x18
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 40a:	96ae                	add	a3,a3,a1
		if(bit) { RELEASE_SDA; } else { ASSERT_SDA; }
 40c:	8761                	srai	a4,a4,0x18
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 40e:	4294                	lw	a3,0(a3)
 410:	00050593          	mv	a1,a0
 414:	d8078793          	addi	a5,a5,-640
		if(bit) { RELEASE_SDA; } else { ASSERT_SDA; }
 418:	0c075b63          	bgez	a4,4ee <swi2c_master_tx_byte.constprop.0+0x120>
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 41c:	4298                	lw	a4,0(a3)
		| (mode << (4 * byte[1]));
 41e:	4511                	li	a0,4
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 420:	00577733          	and	a4,a4,t0
		| (mode << (4 * byte[1]));
 424:	00751533          	sll	a0,a0,t2
 428:	8f49                	or	a4,a4,a0
	gpio_port_reg[byte[0]]->CFGLR = 
 42a:	c298                	sw	a4,0(a3)
		RELEASE_SCL;   // SCL HIGH
 42c:	4198                	lw	a4,0(a1)
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 42e:	443d                	li	s0,15
 430:	ca36                	sw	a3,20(sp)
		RELEASE_SCL;   // SCL HIGH
 432:	c03a                	sw	a4,0(sp)
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 434:	0ff77713          	zext.b	a4,a4
 438:	070a                	slli	a4,a4,0x2
 43a:	97ba                	add	a5,a5,a4
 43c:	4384                	lw	s1,0(a5)
 43e:	4782                	lw	a5,0(sp)
		| (mode << (4 * byte[1]));
 440:	4691                	li	a3,4
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 442:	4098                	lw	a4,0(s1)
 444:	8399                	srli	a5,a5,0x6
 446:	3fc7f793          	andi	a5,a5,1020
 44a:	00f41433          	sll	s0,s0,a5
 44e:	fff44413          	not	s0,s0
		| (mode << (4 * byte[1]));
 452:	00f696b3          	sll	a3,a3,a5
		stat = clk_stretch(i2c->pin_scl);
 456:	4502                	lw	a0,0(sp)
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 458:	8f61                	and	a4,a4,s0
		| (mode << (4 * byte[1]));
 45a:	8f55                	or	a4,a4,a3
	gpio_port_reg[byte[0]]->CFGLR = 
 45c:	c098                	sw	a4,0(s1)
 45e:	d032                	sw	a2,32(sp)
 460:	ce16                	sw	t0,28(sp)
 462:	cc1e                	sw	t2,24(sp)
 464:	c81a                	sw	t1,16(sp)
		| (mode << (4 * byte[1]));
 466:	c63e                	sw	a5,12(sp)
 468:	c236                	sw	a3,4(sp)
		stat = clk_stretch(i2c->pin_scl);
 46a:	3d09                	jal	27c <clk_stretch>
		| (mode << (4 * byte[1]));
 46c:	47b2                	lw	a5,12(sp)
		stat = clk_stretch(i2c->pin_scl);
 46e:	85aa                	mv	a1,a0
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 470:	4088                	lw	a0,0(s1)
	while(index--)
 472:	4342                	lw	t1,16(sp)
		data = data << 1;
 474:	5602                	lw	a2,32(sp)
		| (mode << (4 * byte[1]));
 476:	4705                	li	a4,1
 478:	00f717b3          	sll	a5,a4,a5
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 47c:	8d61                	and	a0,a0,s0
		| (mode << (4 * byte[1]));
 47e:	8d5d                	or	a0,a0,a5
	while(index--)
 480:	137d                	addi	t1,t1,-1
		data = data << 1;
 482:	0606                	slli	a2,a2,0x1
	gpio_port_reg[byte[0]]->CFGLR = 
 484:	c088                	sw	a0,0(s1)
	while(index--)
 486:	0ff37313          	zext.b	t1,t1
 48a:	46d2                	lw	a3,20(sp)
 48c:	43e2                	lw	t2,24(sp)
 48e:	42f2                	lw	t0,28(sp)
		data = data << 1;
 490:	0ff67613          	zext.b	a2,a2
	while(index--)
 494:	f40313e3          	bnez	t1,3da <swi2c_master_tx_byte.constprop.0+0xc>
	if(stat == I2C_OK)
 498:	e5a9                	bnez	a1,4e2 <swi2c_master_tx_byte.constprop.0+0x114>
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 49a:	4290                	lw	a2,0(a3)
 49c:	c83e                	sw	a5,16(sp)
		| (mode << (4 * byte[1]));
 49e:	4791                	li	a5,4
 4a0:	00779533          	sll	a0,a5,t2
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 4a4:	00567633          	and	a2,a2,t0
		| (mode << (4 * byte[1]));
 4a8:	8e49                	or	a2,a2,a0
	gpio_port_reg[byte[0]]->CFGLR = 
 4aa:	c290                	sw	a2,0(a3)
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 4ac:	4090                	lw	a2,0(s1)
		| (mode << (4 * byte[1]));
 4ae:	4792                	lw	a5,4(sp)
		if(clk_stretch(i2c->pin_scl) == I2C_OK)
 4b0:	4502                	lw	a0,0(sp)
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 4b2:	8e61                	and	a2,a2,s0
		| (mode << (4 * byte[1]));
 4b4:	8e5d                	or	a2,a2,a5
	gpio_port_reg[byte[0]]->CFGLR = 
 4b6:	c090                	sw	a2,0(s1)
 4b8:	ca2e                	sw	a1,20(sp)
 4ba:	c636                	sw	a3,12(sp)
		if(clk_stretch(i2c->pin_scl) == I2C_OK)
 4bc:	33c1                	jal	27c <clk_stretch>
 4be:	47c2                	lw	a5,16(sp)
 4c0:	45d2                	lw	a1,20(sp)
 4c2:	ed01                	bnez	a0,4da <swi2c_master_tx_byte.constprop.0+0x10c>
	if( (gpio_port_reg[ byte[0] ]->INDR & (0x01 << byte[1])) != 0x00 ) 
 4c4:	46b2                	lw	a3,12(sp)
 4c6:	4622                	lw	a2,8(sp)
 4c8:	4705                	li	a4,1
 4ca:	4694                	lw	a3,8(a3)
 4cc:	00c71733          	sll	a4,a4,a2
 4d0:	8f75                	and	a4,a4,a3
 4d2:	00e03733          	snez	a4,a4
 4d6:	00171593          	slli	a1,a4,0x1
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 4da:	4098                	lw	a4,0(s1)
 4dc:	8c79                	and	s0,s0,a4
		| (mode << (4 * byte[1]));
 4de:	8c5d                	or	s0,s0,a5
	gpio_port_reg[byte[0]]->CFGLR = 
 4e0:	c080                	sw	s0,0(s1)
}
 4e2:	50b2                	lw	ra,44(sp)
 4e4:	5422                	lw	s0,40(sp)
 4e6:	5492                	lw	s1,36(sp)
 4e8:	852e                	mv	a0,a1
 4ea:	6145                	addi	sp,sp,48
 4ec:	8082                	ret
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 4ee:	4298                	lw	a4,0(a3)
		| (mode << (4 * byte[1]));
 4f0:	4505                	li	a0,1
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 4f2:	00577733          	and	a4,a4,t0
 4f6:	b73d                	j	424 <swi2c_master_tx_byte.constprop.0+0x56>

000004f8 <swi2c_start.constprop.0>:
		RELEASE_SDA;    // SDA HIGH
 4f8:	20000337          	lui	t1,0x20000
i2c_err_t swi2c_start(i2c_device_t *i2c)
 4fc:	1111                	addi	sp,sp,-28
		RELEASE_SDA;    // SDA HIGH
 4fe:	00030293          	mv	t0,t1
		RELEASE_SCL;    // SCL HIGH
 502:	0002a503          	lw	a0,0(t0)
i2c_err_t swi2c_start(i2c_device_t *i2c)
 506:	ca22                	sw	s0,20(sp)
		RELEASE_SDA;    // SDA HIGH
 508:	0042a403          	lw	s0,4(t0)
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 50c:	6705                	lui	a4,0x1
 50e:	0ff57693          	zext.b	a3,a0
 512:	0ff47793          	zext.b	a5,s0
 516:	d8070713          	addi	a4,a4,-640 # d80 <gpio_port_reg>
 51a:	068a                	slli	a3,a3,0x2
 51c:	078a                	slli	a5,a5,0x2
 51e:	97ba                	add	a5,a5,a4
 520:	9736                	add	a4,a4,a3
 522:	4314                	lw	a3,0(a4)
i2c_err_t swi2c_start(i2c_device_t *i2c)
 524:	c826                	sw	s1,16(sp)
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 526:	8019                	srli	s0,s0,0x6
 528:	00655493          	srli	s1,a0,0x6
	if(i2c->_active)
 52c:	0102c703          	lbu	a4,16(t0)
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 530:	4390                	lw	a2,0(a5)
 532:	3fc47413          	andi	s0,s0,1020
 536:	47bd                	li	a5,15
 538:	3fc4f493          	andi	s1,s1,1020
 53c:	008795b3          	sll	a1,a5,s0
i2c_err_t swi2c_start(i2c_device_t *i2c)
 540:	cc06                	sw	ra,24(sp)
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 542:	009797b3          	sll	a5,a5,s1
 546:	fff5c593          	not	a1,a1
 54a:	fff7c793          	not	a5,a5
	if(i2c->_active)
 54e:	eb05                	bnez	a4,57e <swi2c_start.constprop.0+0x86>
 550:	00030313          	mv	t1,t1
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 554:	4218                	lw	a4,0(a2)
	return stat;
 556:	4501                	li	a0,0
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 558:	8f6d                	and	a4,a4,a1
		| (mode << (4 * byte[1]));
 55a:	4585                	li	a1,1
 55c:	00859433          	sll	s0,a1,s0
 560:	8c59                	or	s0,s0,a4
	gpio_port_reg[byte[0]]->CFGLR = 
 562:	c200                	sw	s0,0(a2)
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 564:	4298                	lw	a4,0(a3)
		| (mode << (4 * byte[1]));
 566:	009594b3          	sll	s1,a1,s1
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 56a:	8ff9                	and	a5,a5,a4
		| (mode << (4 * byte[1]));
 56c:	8cdd                	or	s1,s1,a5
	gpio_port_reg[byte[0]]->CFGLR = 
 56e:	c284                	sw	s1,0(a3)
	i2c->_active = true;
 570:	00b30823          	sb	a1,16(t1) # 20000010 <dev+0x10>
}
 574:	40e2                	lw	ra,24(sp)
 576:	4452                	lw	s0,20(sp)
 578:	44c2                	lw	s1,16(sp)
 57a:	0171                	addi	sp,sp,28
 57c:	8082                	ret
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 57e:	4218                	lw	a4,0(a2)
		| (mode << (4 * byte[1]));
 580:	4291                	li	t0,4
 582:	008293b3          	sll	t2,t0,s0
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 586:	8f6d                	and	a4,a4,a1
		| (mode << (4 * byte[1]));
 588:	00776733          	or	a4,a4,t2
	gpio_port_reg[byte[0]]->CFGLR = 
 58c:	c218                	sw	a4,0(a2)
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 58e:	4298                	lw	a4,0(a3)
		| (mode << (4 * byte[1]));
 590:	009292b3          	sll	t0,t0,s1
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 594:	c62e                	sw	a1,12(sp)
 596:	8f7d                	and	a4,a4,a5
		| (mode << (4 * byte[1]));
 598:	00576733          	or	a4,a4,t0
	gpio_port_reg[byte[0]]->CFGLR = 
 59c:	c298                	sw	a4,0(a3)
 59e:	c432                	sw	a2,8(sp)
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 5a0:	c23e                	sw	a5,4(sp)
	gpio_port_reg[byte[0]]->CFGLR = 
 5a2:	c036                	sw	a3,0(sp)
		if( (stat = clk_stretch(i2c->pin_scl)) != I2C_OK) return stat;
 5a4:	39e1                	jal	27c <clk_stretch>
 5a6:	20000737          	lui	a4,0x20000
 5aa:	4682                	lw	a3,0(sp)
 5ac:	4792                	lw	a5,4(sp)
 5ae:	4622                	lw	a2,8(sp)
 5b0:	45b2                	lw	a1,12(sp)
 5b2:	00070313          	mv	t1,a4
 5b6:	dd59                	beqz	a0,554 <swi2c_start.constprop.0+0x5c>
 5b8:	bf75                	j	574 <swi2c_start.constprop.0+0x7c>

000005ba <internal_handle_input.constprop.0>:
 5ba:	e00007b7          	lui	a5,0xe0000
 5be:	0f478793          	addi	a5,a5,244 # e00000f4 <__global_pointer$+0xbffff8dc>
 5c2:	439c                	lw	a5,0(a5)
 5c4:	8082                	ret

000005c6 <_write.constprop.0>:
 5c6:	1101                	addi	sp,sp,-32
 5c8:	cc22                	sw	s0,24(sp)
 5ca:	ce06                	sw	ra,28(sp)
 5cc:	ca26                	sw	s1,20(sp)
 5ce:	c02a                	sw	a0,0(sp)
 5d0:	c802                	sw	zero,16(sp)
 5d2:	842e                	mv	s0,a1
 5d4:	e1f9                	bnez	a1,69a <_write.constprop.0+0xd4>
 5d6:	e00007b7          	lui	a5,0xe0000
 5da:	0f478793          	addi	a5,a5,244 # e00000f4 <__global_pointer$+0xbffff8dc>
 5de:	439c                	lw	a5,0(a5)
 5e0:	c789                	beqz	a5,5ea <_write.constprop.0+0x24>
 5e2:	0807f793          	andi	a5,a5,128
 5e6:	e391                	bnez	a5,5ea <_write.constprop.0+0x24>
 5e8:	3fc9                	jal	5ba <internal_handle_input.constprop.0>
 5ea:	40f2                	lw	ra,28(sp)
 5ec:	8522                	mv	a0,s0
 5ee:	4462                	lw	s0,24(sp)
 5f0:	44d2                	lw	s1,20(sp)
 5f2:	6105                	addi	sp,sp,32
 5f4:	8082                	ret
 5f6:	409406b3          	sub	a3,s0,s1
 5fa:	461d                	li	a2,7
 5fc:	8736                	mv	a4,a3
 5fe:	00d65363          	bge	a2,a3,604 <_write.constprop.0+0x3e>
 602:	471d                	li	a4,7
 604:	00027637          	lui	a2,0x27
 608:	10160613          	addi	a2,a2,257 # 27101 <lib_swi2c.c.02f2e42d+0x2445c>
 60c:	00032583          	lw	a1,0(t1)
 610:	0805f513          	andi	a0,a1,128
 614:	ed3d                	bnez	a0,692 <_write.constprop.0+0xcc>
 616:	c981                	beqz	a1,626 <_write.constprop.0+0x60>
 618:	c61a                	sw	t1,12(sp)
 61a:	c43a                	sw	a4,8(sp)
 61c:	c236                	sw	a3,4(sp)
 61e:	3f71                	jal	5ba <internal_handle_input.constprop.0>
 620:	4332                	lw	t1,12(sp)
 622:	4722                	lw	a4,8(sp)
 624:	4692                	lw	a3,4(sp)
 626:	0036a693          	slti	a3,a3,3
 62a:	4601                	li	a2,0
 62c:	e299                	bnez	a3,632 <_write.constprop.0+0x6c>
 62e:	ffd70613          	addi	a2,a4,-3 # 1ffffffd <lib_swi2c.c.02f2e42d+0x1fffd358>
 632:	4782                	lw	a5,0(sp)
 634:	00348593          	addi	a1,s1,3
 638:	0808                	addi	a0,sp,16
 63a:	95be                	add	a1,a1,a5
 63c:	c41a                	sw	t1,8(sp)
 63e:	c23a                	sw	a4,4(sp)
 640:	298d                	jal	ab2 <memcpy>
 642:	4642                	lw	a2,16(sp)
 644:	4782                	lw	a5,0(sp)
 646:	e00006b7          	lui	a3,0xe0000
 64a:	4322                	lw	t1,8(sp)
 64c:	4712                	lw	a4,4(sp)
 64e:	0f868693          	addi	a3,a3,248 # e00000f8 <__global_pointer$+0xbffff8e0>
 652:	c290                	sw	a2,0(a3)
 654:	458d                	li	a1,3
 656:	00978633          	add	a2,a5,s1
 65a:	4681                	li	a3,0
 65c:	00064283          	lbu	t0,0(a2)
 660:	0685                	addi	a3,a3,1
 662:	01068793          	addi	a5,a3,16
 666:	00278533          	add	a0,a5,sp
 66a:	00550023          	sb	t0,0(a0) # 20000000 <dev>
 66e:	00d70563          	beq	a4,a3,678 <_write.constprop.0+0xb2>
 672:	0605                	addi	a2,a2,1
 674:	feb694e3          	bne	a3,a1,65c <_write.constprop.0+0x96>
 678:	00470693          	addi	a3,a4,4
 67c:	f806e693          	ori	a3,a3,-128
 680:	00d10823          	sb	a3,16(sp)
 684:	46c2                	lw	a3,16(sp)
 686:	94ba                	add	s1,s1,a4
 688:	00d32023          	sw	a3,0(t1)
 68c:	f684c5e3          	blt	s1,s0,5f6 <_write.constprop.0+0x30>
 690:	bfa9                	j	5ea <_write.constprop.0+0x24>
 692:	167d                	addi	a2,a2,-1
 694:	fe25                	bnez	a2,60c <_write.constprop.0+0x46>
 696:	8426                	mv	s0,s1
 698:	bf89                	j	5ea <_write.constprop.0+0x24>
 69a:	e0000337          	lui	t1,0xe0000
 69e:	4481                	li	s1,0
 6a0:	0f430313          	addi	t1,t1,244 # e00000f4 <__global_pointer$+0xbffff8dc>
 6a4:	b7e5                	j	68c <_write.constprop.0+0xc6>

000006a6 <__puts_uart>:
 6a6:	1151                	addi	sp,sp,-12
 6a8:	c222                	sw	s0,4(sp)
 6aa:	c406                	sw	ra,8(sp)
 6ac:	842e                	mv	s0,a1
 6ae:	3f21                	jal	5c6 <_write.constprop.0>
 6b0:	40a2                	lw	ra,8(sp)
 6b2:	8522                	mv	a0,s0
 6b4:	4412                	lw	s0,4(sp)
 6b6:	0131                	addi	sp,sp,12
 6b8:	8082                	ret

000006ba <swi2c_stop.constprop.0.isra.0>:
i2c_err_t swi2c_stop(i2c_device_t *i2c)
 6ba:	1131                	addi	sp,sp,-20
 6bc:	c426                	sw	s1,8(sp)
	ASSERT_SDA;     // SDA LOW 
 6be:	200004b7          	lui	s1,0x20000
 6c2:	00048493          	mv	s1,s1
 6c6:	40d4                	lw	a3,4(s1)
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 6c8:	6605                	lui	a2,0x1
 6ca:	d8060613          	addi	a2,a2,-640 # d80 <gpio_port_reg>
 6ce:	0ff6f793          	zext.b	a5,a3
 6d2:	078a                	slli	a5,a5,0x2
 6d4:	97b2                	add	a5,a5,a2
 6d6:	4398                	lw	a4,0(a5)
 6d8:	8299                	srli	a3,a3,0x6
 6da:	3fc6f693          	andi	a3,a3,1020
 6de:	430c                	lw	a1,0(a4)
 6e0:	47bd                	li	a5,15
i2c_err_t swi2c_stop(i2c_device_t *i2c)
 6e2:	c622                	sw	s0,12(sp)
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 6e4:	00d79433          	sll	s0,a5,a3
 6e8:	fff44413          	not	s0,s0
		| (mode << (4 * byte[1]));
 6ec:	4505                	li	a0,1
 6ee:	00d51533          	sll	a0,a0,a3
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 6f2:	8de1                	and	a1,a1,s0
		| (mode << (4 * byte[1]));
 6f4:	8dc9                	or	a1,a1,a0
	RELEASE_SCL;    // SCL HIGH
 6f6:	4088                	lw	a0,0(s1)
i2c_err_t swi2c_stop(i2c_device_t *i2c)
 6f8:	c806                	sw	ra,16(sp)
	gpio_port_reg[byte[0]]->CFGLR = 
 6fa:	c30c                	sw	a1,0(a4)
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 6fc:	0ff57593          	zext.b	a1,a0
 700:	058a                	slli	a1,a1,0x2
 702:	962e                	add	a2,a2,a1
 704:	420c                	lw	a1,0(a2)
 706:	00655313          	srli	t1,a0,0x6
 70a:	3fc37313          	andi	t1,t1,1020
 70e:	4190                	lw	a2,0(a1)
 710:	006797b3          	sll	a5,a5,t1
 714:	fff7c793          	not	a5,a5
 718:	8ff1                	and	a5,a5,a2
		| (mode << (4 * byte[1]));
 71a:	4611                	li	a2,4
 71c:	00661333          	sll	t1,a2,t1
 720:	0067e7b3          	or	a5,a5,t1
	gpio_port_reg[byte[0]]->CFGLR = 
 724:	c19c                	sw	a5,0(a1)
		| (mode << (4 * byte[1]));
 726:	c236                	sw	a3,4(sp)
	gpio_port_reg[byte[0]]->CFGLR = 
 728:	c03a                	sw	a4,0(sp)
	stat = clk_stretch(i2c->pin_scl);
 72a:	3e89                	jal	27c <clk_stretch>
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 72c:	4702                	lw	a4,0(sp)
		| (mode << (4 * byte[1]));
 72e:	4692                	lw	a3,4(sp)
 730:	4611                	li	a2,4
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 732:	431c                	lw	a5,0(a4)
		| (mode << (4 * byte[1]));
 734:	00d61633          	sll	a2,a2,a3
}
 738:	40c2                	lw	ra,16(sp)
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 73a:	8c7d                	and	s0,s0,a5
		| (mode << (4 * byte[1]));
 73c:	8c51                	or	s0,s0,a2
	gpio_port_reg[byte[0]]->CFGLR = 
 73e:	c300                	sw	s0,0(a4)
}
 740:	4432                	lw	s0,12(sp)
	i2c->_active = false;
 742:	00048823          	sb	zero,16(s1) # 20000010 <dev+0x10>
}
 746:	44a2                	lw	s1,8(sp)
 748:	0151                	addi	sp,sp,20
 74a:	8082                	ret

0000074c <swi2c_master_transmit.part.0.constprop.0>:
	}

}


i2c_err_t swi2c_master_transmit(i2c_device_t *i2c, 
 74c:	1141                	addi	sp,sp,-16
 74e:	c422                	sw	s0,8(sp)
 750:	c226                	sw	s1,4(sp)
 752:	c606                	sw	ra,12(sp)
 754:	842a                	mv	s0,a0
 756:	c02e                	sw	a1,0(sp)
	if(i2c == NULL || data == NULL || size == 0) return I2C_ERR_INVALID_ARGS;

	i2c_err_t stat = I2C_OK;
	// Gaurd each step from failure
	// Send START Condition and address byte
	if( (stat = swi2c_start(i2c)) == I2C_OK && 
 758:	3345                	jal	4f8 <swi2c_start.constprop.0>
 75a:	84aa                	mv	s1,a0
 75c:	e91d                	bnez	a0,792 <swi2c_master_transmit.part.0.constprop.0+0x46>
		(stat = swi2c_master_tx_byte(i2c, (i2c->address << 1) & 0xFE)) == I2C_OK)
 75e:	200007b7          	lui	a5,0x20000
 762:	0087c503          	lbu	a0,8(a5) # 20000008 <dev+0x8>
 766:	0506                	slli	a0,a0,0x1
 768:	0fe57513          	andi	a0,a0,254
 76c:	318d                	jal	3ce <swi2c_master_tx_byte.constprop.0>
 76e:	84aa                	mv	s1,a0
	if( (stat = swi2c_start(i2c)) == I2C_OK && 
 770:	e10d                	bnez	a0,792 <swi2c_master_transmit.part.0.constprop.0+0x46>
	{
		swi2c_master_tx_byte(i2c, reg);
 772:	39b1                	jal	3ce <swi2c_master_tx_byte.constprop.0>
		while(size)
 774:	4782                	lw	a5,0(sp)
 776:	97a2                	add	a5,a5,s0
 778:	07c2                	slli	a5,a5,0x10
 77a:	83c1                	srli	a5,a5,0x10
		{
			swi2c_master_tx_byte(i2c, *data);
 77c:	00044503          	lbu	a0,0(s0)
 780:	c03e                	sw	a5,0(sp)
			++data;
 782:	0405                	addi	s0,s0,1
			swi2c_master_tx_byte(i2c, *data);
 784:	31a9                	jal	3ce <swi2c_master_tx_byte.constprop.0>
		while(size)
 786:	4782                	lw	a5,0(sp)
 788:	01041713          	slli	a4,s0,0x10
 78c:	8341                	srli	a4,a4,0x10
 78e:	fef717e3          	bne	a4,a5,77c <swi2c_master_transmit.part.0.constprop.0+0x30>
			--size;
		}
	}

	swi2c_stop(i2c);
 792:	3725                	jal	6ba <swi2c_stop.constprop.0.isra.0>
	return stat;
}
 794:	40b2                	lw	ra,12(sp)
 796:	4422                	lw	s0,8(sp)
 798:	8526                	mv	a0,s1
 79a:	4492                	lw	s1,4(sp)
 79c:	0141                	addi	sp,sp,16
 79e:	8082                	ret

000007a0 <swi2c_master_receive.part.0.constprop.0>:


i2c_err_t swi2c_master_receive(i2c_device_t *i2c, 
 7a0:	1121                	addi	sp,sp,-24
 7a2:	c822                	sw	s0,16(sp)
 7a4:	ca06                	sw	ra,20(sp)
 7a6:	c626                	sw	s1,12(sp)
 7a8:	c02a                	sw	a0,0(sp)
 7aa:	c22e                	sw	a1,4(sp)

	i2c_err_t stat = I2C_OK;

	// Gaurd each step from failure
	// Send START Condition and address byte
	if( (stat = swi2c_start(i2c)) == I2C_OK && 
 7ac:	33b1                	jal	4f8 <swi2c_start.constprop.0>
 7ae:	842a                	mv	s0,a0
 7b0:	e139                	bnez	a0,7f6 <swi2c_master_receive.part.0.constprop.0+0x56>
		(stat = swi2c_master_tx_byte(i2c, (i2c->address << 1) & 0xFE)) == I2C_OK)
 7b2:	200007b7          	lui	a5,0x20000
 7b6:	0087c483          	lbu	s1,8(a5) # 20000008 <dev+0x8>
 7ba:	0486                	slli	s1,s1,0x1
 7bc:	0fe4f513          	andi	a0,s1,254
 7c0:	3139                	jal	3ce <swi2c_master_tx_byte.constprop.0>
 7c2:	842a                	mv	s0,a0
	if( (stat = swi2c_start(i2c)) == I2C_OK && 
 7c4:	e90d                	bnez	a0,7f6 <swi2c_master_receive.part.0.constprop.0+0x56>
	{
		// Send the Register Byte
		swi2c_master_tx_byte(i2c, reg);
 7c6:	3121                	jal	3ce <swi2c_master_tx_byte.constprop.0>

		// Repeat the START Condition
		swi2c_start(i2c);
 7c8:	3b05                	jal	4f8 <swi2c_start.constprop.0>
		// Send address in Read Mode
		swi2c_master_tx_byte(i2c, (i2c->address << 1) | 0x01);
 7ca:	0014e513          	ori	a0,s1,1
 7ce:	0ff57513          	zext.b	a0,a0
 7d2:	3ef5                	jal	3ce <swi2c_master_tx_byte.constprop.0>

		while(--size >= 1)
 7d4:	4782                	lw	a5,0(sp)
 7d6:	4492                	lw	s1,4(sp)
 7d8:	14fd                	addi	s1,s1,-1
 7da:	04c2                	slli	s1,s1,0x10
 7dc:	80c1                	srli	s1,s1,0x10
 7de:	e09d                	bnez	s1,804 <swi2c_master_receive.part.0.constprop.0+0x64>
 7e0:	4792                	lw	a5,4(sp)
 7e2:	4702                	lw	a4,0(sp)
			*data = swi2c_master_rx_byte(i2c, I2C_ACK);
			++data;
		}

		// Last byte read has NACK bit set
		*data = swi2c_master_rx_byte(i2c, I2C_NACK);
 7e4:	4505                	li	a0,1
 7e6:	17fd                	addi	a5,a5,-1
 7e8:	07c2                	slli	a5,a5,0x10
 7ea:	83c1                	srli	a5,a5,0x10
 7ec:	00f704b3          	add	s1,a4,a5
 7f0:	3c75                	jal	2ac <swi2c_master_rx_byte.constprop.0>
 7f2:	00a48023          	sb	a0,0(s1)
	}

	swi2c_stop(i2c);
 7f6:	35d1                	jal	6ba <swi2c_stop.constprop.0.isra.0>
	return stat;
}
 7f8:	40d2                	lw	ra,20(sp)
 7fa:	8522                	mv	a0,s0
 7fc:	4442                	lw	s0,16(sp)
 7fe:	44b2                	lw	s1,12(sp)
 800:	0161                	addi	sp,sp,24
 802:	8082                	ret
			*data = swi2c_master_rx_byte(i2c, I2C_ACK);
 804:	4501                	li	a0,0
 806:	c43e                	sw	a5,8(sp)
 808:	3455                	jal	2ac <swi2c_master_rx_byte.constprop.0>
 80a:	47a2                	lw	a5,8(sp)
 80c:	00a78023          	sb	a0,0(a5)
			++data;
 810:	0785                	addi	a5,a5,1
 812:	b7d9                	j	7d8 <swi2c_master_receive.part.0.constprop.0+0x38>

00000814 <handle_reset>:
 814:	20000197          	auipc	gp,0x20000
 818:	00418193          	addi	gp,gp,4 # 20000818 <__global_pointer$>
 81c:	fe818113          	addi	sp,gp,-24 # 20000800 <_eusrstack>
 820:	08000513          	li	a0,128
 824:	30051073          	csrw	mstatus,a0
 828:	468d                	li	a3,3
 82a:	fffff517          	auipc	a0,0xfffff
 82e:	7d650513          	addi	a0,a0,2006 # 0 <InterruptVector>
 832:	8d55                	or	a0,a0,a3
 834:	30551073          	csrw	mtvec,a0
 838:	1ffff517          	auipc	a0,0x1ffff
 83c:	7e050513          	addi	a0,a0,2016 # 20000018 <_ebss>
 840:	1ffff597          	auipc	a1,0x1ffff
 844:	7d858593          	addi	a1,a1,2008 # 20000018 <_ebss>
 848:	4601                	li	a2,0
 84a:	00b55663          	bge	a0,a1,856 <handle_reset+0x42>
 84e:	c110                	sw	a2,0(a0)
 850:	0511                	addi	a0,a0,4
 852:	feb54ee3          	blt	a0,a1,84e <handle_reset+0x3a>
 856:	00000517          	auipc	a0,0x0
 85a:	53a50513          	addi	a0,a0,1338 # d90 <_data_lma>
 85e:	1ffff597          	auipc	a1,0x1ffff
 862:	7a258593          	addi	a1,a1,1954 # 20000000 <dev>
 866:	1ffff617          	auipc	a2,0x1ffff
 86a:	7b260613          	addi	a2,a2,1970 # 20000018 <_ebss>
 86e:	00c58863          	beq	a1,a2,87e <handle_reset+0x6a>
 872:	4114                	lw	a3,0(a0)
 874:	c194                	sw	a3,0(a1)
 876:	0511                	addi	a0,a0,4
 878:	0591                	addi	a1,a1,4
 87a:	fec59ae3          	bne	a1,a2,86e <handle_reset+0x5a>
 87e:	e000f7b7          	lui	a5,0xe000f
 882:	4715                	li	a4,5
 884:	c398                	sw	a4,0(a5)
 886:	6785                	lui	a5,0x1
 888:	b5c78793          	addi	a5,a5,-1188 # b5c <main>
 88c:	34179073          	csrw	mepc,a5
 890:	30200073          	mret

00000894 <ADC1_IRQHandler>:
 894:	a001                	j	894 <ADC1_IRQHandler>

00000896 <NMI_Handler>:
 896:	40021737          	lui	a4,0x40021
 89a:	471c                	lw	a5,8(a4)
 89c:	008006b7          	lui	a3,0x800
 8a0:	8fd5                	or	a5,a5,a3
 8a2:	c71c                	sw	a5,8(a4)

000008a4 <strlen>:
 8a4:	87aa                	mv	a5,a0
 8a6:	0007c703          	lbu	a4,0(a5)
 8aa:	e701                	bnez	a4,8b2 <strlen+0xe>
 8ac:	40a78533          	sub	a0,a5,a0
 8b0:	8082                	ret
 8b2:	0785                	addi	a5,a5,1
 8b4:	bfcd                	j	8a6 <strlen+0x2>

000008b6 <mini_vpprintf>:
 8b6:	fa410113          	addi	sp,sp,-92
 8ba:	caa2                	sw	s0,84(sp)
 8bc:	c8a6                	sw	s1,80(sp)
 8be:	cc86                	sw	ra,88(sp)
 8c0:	c02a                	sw	a0,0(sp)
 8c2:	c22e                	sw	a1,4(sp)
 8c4:	8432                	mv	s0,a2
 8c6:	84b6                	mv	s1,a3
 8c8:	ca02                	sw	zero,20(sp)
 8ca:	00044783          	lbu	a5,0(s0)
 8ce:	00140693          	addi	a3,s0,1
 8d2:	00f10fa3          	sb	a5,31(sp)
 8d6:	eb81                	bnez	a5,8e6 <mini_vpprintf+0x30>
 8d8:	40e6                	lw	ra,88(sp)
 8da:	4456                	lw	s0,84(sp)
 8dc:	4552                	lw	a0,20(sp)
 8de:	44c6                	lw	s1,80(sp)
 8e0:	05c10113          	addi	sp,sp,92
 8e4:	8082                	ret
 8e6:	c636                	sw	a3,12(sp)
 8e8:	02500713          	li	a4,37
 8ec:	02e78063          	beq	a5,a4,90c <mini_vpprintf+0x56>
 8f0:	4612                	lw	a2,4(sp)
 8f2:	4782                	lw	a5,0(sp)
 8f4:	4585                	li	a1,1
 8f6:	01f10513          	addi	a0,sp,31
 8fa:	9782                	jalr	a5
 8fc:	46b2                	lw	a3,12(sp)
 8fe:	c426                	sw	s1,8(sp)
 900:	8436                	mv	s0,a3
 902:	47d2                	lw	a5,20(sp)
 904:	44a2                	lw	s1,8(sp)
 906:	97aa                	add	a5,a5,a0
 908:	ca3e                	sw	a5,20(sp)
 90a:	b7c1                	j	8ca <mini_vpprintf+0x14>
 90c:	00144703          	lbu	a4,1(s0)
 910:	03000613          	li	a2,48
 914:	03000693          	li	a3,48
 918:	00e10fa3          	sb	a4,31(sp)
 91c:	c632                	sw	a2,12(sp)
 91e:	00240793          	addi	a5,s0,2
 922:	08d71263          	bne	a4,a3,9a6 <mini_vpprintf+0xf0>
 926:	843e                	mv	s0,a5
 928:	4681                	li	a3,0
 92a:	4781                	li	a5,0
 92c:	45a5                	li	a1,9
 92e:	a811                	j	942 <mini_vpprintf+0x8c>
 930:	00279713          	slli	a4,a5,0x2
 934:	0405                	addi	s0,s0,1
 936:	97ba                	add	a5,a5,a4
 938:	fff44703          	lbu	a4,-1(s0)
 93c:	0786                	slli	a5,a5,0x1
 93e:	97b2                	add	a5,a5,a2
 940:	4685                	li	a3,1
 942:	fd070613          	addi	a2,a4,-48 # 40020fd0 <__global_pointer$+0x200207b8>
 946:	0ff67513          	zext.b	a0,a2
 94a:	fea5f3e3          	bgeu	a1,a0,930 <mini_vpprintf+0x7a>
 94e:	c299                	beqz	a3,954 <mini_vpprintf+0x9e>
 950:	00e10fa3          	sb	a4,31(sp)
 954:	c83e                	sw	a5,16(sp)
 956:	46e1                	li	a3,24
 958:	00f6d363          	bge	a3,a5,95e <mini_vpprintf+0xa8>
 95c:	c836                	sw	a3,16(sp)
 95e:	06c00613          	li	a2,108
 962:	4681                	li	a3,0
 964:	00c71863          	bne	a4,a2,974 <mini_vpprintf+0xbe>
 968:	00044703          	lbu	a4,0(s0)
 96c:	4685                	li	a3,1
 96e:	0405                	addi	s0,s0,1
 970:	00e10fa3          	sb	a4,31(sp)
 974:	01f14603          	lbu	a2,31(sp)
 978:	06400713          	li	a4,100
 97c:	06e60563          	beq	a2,a4,9e6 <mini_vpprintf+0x130>
 980:	02c76763          	bltu	a4,a2,9ae <mini_vpprintf+0xf8>
 984:	05800793          	li	a5,88
 988:	0af60263          	beq	a2,a5,a2c <mini_vpprintf+0x176>
 98c:	06300793          	li	a5,99
 990:	0cf60063          	beq	a2,a5,a50 <mini_vpprintf+0x19a>
 994:	d231                	beqz	a2,8d8 <mini_vpprintf+0x22>
 996:	4612                	lw	a2,4(sp)
 998:	4782                	lw	a5,0(sp)
 99a:	4585                	li	a1,1
 99c:	01f10513          	addi	a0,sp,31
 9a0:	9782                	jalr	a5
 9a2:	c426                	sw	s1,8(sp)
 9a4:	bfb9                	j	902 <mini_vpprintf+0x4c>
 9a6:	02000693          	li	a3,32
 9aa:	c636                	sw	a3,12(sp)
 9ac:	bfad                	j	926 <mini_vpprintf+0x70>
 9ae:	07500713          	li	a4,117
 9b2:	02e60a63          	beq	a2,a4,9e6 <mini_vpprintf+0x130>
 9b6:	07800713          	li	a4,120
 9ba:	06e60963          	beq	a2,a4,a2c <mini_vpprintf+0x176>
 9be:	07300713          	li	a4,115
 9c2:	fce61ae3          	bne	a2,a4,996 <mini_vpprintf+0xe0>
 9c6:	cc3e                	sw	a5,24(sp)
 9c8:	00448793          	addi	a5,s1,4
 9cc:	4084                	lw	s1,0(s1)
 9ce:	c43e                	sw	a5,8(sp)
 9d0:	8526                	mv	a0,s1
 9d2:	3dc9                	jal	8a4 <strlen>
 9d4:	47e2                	lw	a5,24(sp)
 9d6:	85aa                	mv	a1,a0
 9d8:	08f05963          	blez	a5,a6a <mini_vpprintf+0x1b4>
 9dc:	46c2                	lw	a3,16(sp)
 9de:	4632                	lw	a2,12(sp)
 9e0:	1838                	addi	a4,sp,56
 9e2:	8526                	mv	a0,s1
 9e4:	a025                	j	a0c <mini_vpprintf+0x156>
 9e6:	00448793          	addi	a5,s1,4
 9ea:	c43e                	sw	a5,8(sp)
 9ec:	ca85                	beqz	a3,a1c <mini_vpprintf+0x166>
 9ee:	f8b60613          	addi	a2,a2,-117
 9f2:	1018                	addi	a4,sp,32
 9f4:	00163693          	seqz	a3,a2
 9f8:	4088                	lw	a0,0(s1)
 9fa:	4601                	li	a2,0
 9fc:	45a9                	li	a1,10
 9fe:	fbeff0ef          	jal	1bc <mini_itoa.part.0>
 a02:	46c2                	lw	a3,16(sp)
 a04:	4632                	lw	a2,12(sp)
 a06:	1838                	addi	a4,sp,56
 a08:	85aa                	mv	a1,a0
 a0a:	1008                	addi	a0,sp,32
 a0c:	f12ff0ef          	jal	11e <mini_pad>
 a10:	4612                	lw	a2,4(sp)
 a12:	85aa                	mv	a1,a0
 a14:	1828                	addi	a0,sp,56
 a16:	4782                	lw	a5,0(sp)
 a18:	9782                	jalr	a5
 a1a:	b5e5                	j	902 <mini_vpprintf+0x4c>
 a1c:	07500793          	li	a5,117
 a20:	1018                	addi	a4,sp,32
 a22:	4685                	li	a3,1
 a24:	fcf60ae3          	beq	a2,a5,9f8 <mini_vpprintf+0x142>
 a28:	4681                	li	a3,0
 a2a:	b7f9                	j	9f8 <mini_vpprintf+0x142>
 a2c:	4088                	lw	a0,0(s1)
 a2e:	fa860613          	addi	a2,a2,-88
 a32:	00448793          	addi	a5,s1,4
 a36:	1018                	addi	a4,sp,32
 a38:	4685                	li	a3,1
 a3a:	00163613          	seqz	a2,a2
 a3e:	45c1                	li	a1,16
 a40:	c43e                	sw	a5,8(sp)
 a42:	f7aff0ef          	jal	1bc <mini_itoa.part.0>
 a46:	46c2                	lw	a3,16(sp)
 a48:	4632                	lw	a2,12(sp)
 a4a:	85aa                	mv	a1,a0
 a4c:	1838                	addi	a4,sp,56
 a4e:	bf75                	j	a0a <mini_vpprintf+0x154>
 a50:	00448793          	addi	a5,s1,4
 a54:	c43e                	sw	a5,8(sp)
 a56:	409c                	lw	a5,0(s1)
 a58:	46c2                	lw	a3,16(sp)
 a5a:	4632                	lw	a2,12(sp)
 a5c:	00f10fa3          	sb	a5,31(sp)
 a60:	1838                	addi	a4,sp,56
 a62:	4585                	li	a1,1
 a64:	01f10513          	addi	a0,sp,31
 a68:	b755                	j	a0c <mini_vpprintf+0x156>
 a6a:	4612                	lw	a2,4(sp)
 a6c:	8526                	mv	a0,s1
 a6e:	b765                	j	a16 <mini_vpprintf+0x160>

00000a70 <printf>:
 a70:	fdc10113          	addi	sp,sp,-36
 a74:	ca32                	sw	a2,20(sp)
 a76:	862a                	mv	a2,a0
 a78:	c82e                	sw	a1,16(sp)
 a7a:	cc36                	sw	a3,24(sp)
 a7c:	4581                	li	a1,0
 a7e:	0814                	addi	a3,sp,16
 a80:	6a600513          	li	a0,1702
 a84:	c606                	sw	ra,12(sp)
 a86:	ce3a                	sw	a4,28(sp)
 a88:	d03e                	sw	a5,32(sp)
 a8a:	c036                	sw	a3,0(sp)
 a8c:	352d                	jal	8b6 <mini_vpprintf>
 a8e:	40b2                	lw	ra,12(sp)
 a90:	02410113          	addi	sp,sp,36
 a94:	8082                	ret

00000a96 <i2c_scan_callback>:
#include "lib_swi2c.h"


// I2C Scan Callback example function. Prints the address which responded
void i2c_scan_callback(const uint8_t addr)
{
 a96:	85aa                	mv	a1,a0
	printf("Address: 0x%02X Responded.\n", addr);
 a98:	6505                	lui	a0,0x1
 a9a:	ce450513          	addi	a0,a0,-796 # ce4 <main+0x188>
 a9e:	bfc9                	j	a70 <printf>

00000aa0 <memset>:
 aa0:	962a                	add	a2,a2,a0
 aa2:	87aa                	mv	a5,a0
 aa4:	00c79363          	bne	a5,a2,aaa <memset+0xa>
 aa8:	8082                	ret
 aaa:	00b78023          	sb	a1,0(a5)
 aae:	0785                	addi	a5,a5,1
 ab0:	bfd5                	j	aa4 <memset+0x4>

00000ab2 <memcpy>:
 ab2:	4781                	li	a5,0
 ab4:	00f61363          	bne	a2,a5,aba <memcpy+0x8>
 ab8:	8082                	ret
 aba:	00f58733          	add	a4,a1,a5
 abe:	00074683          	lbu	a3,0(a4)
 ac2:	00f50733          	add	a4,a0,a5
 ac6:	0785                	addi	a5,a5,1
 ac8:	00d70023          	sb	a3,0(a4)
 acc:	b7e5                	j	ab4 <memcpy+0x2>

00000ace <puts>:
 ace:	1151                	addi	sp,sp,-12
 ad0:	c406                	sw	ra,8(sp)
 ad2:	c222                	sw	s0,4(sp)
 ad4:	c026                	sw	s1,0(sp)
 ad6:	84aa                	mv	s1,a0
 ad8:	33f1                	jal	8a4 <strlen>
 ada:	842a                	mv	s0,a0
 adc:	85aa                	mv	a1,a0
 ade:	8526                	mv	a0,s1
 ae0:	34dd                	jal	5c6 <_write.constprop.0>
 ae2:	6505                	lui	a0,0x1
 ae4:	4585                	li	a1,1
 ae6:	d0050513          	addi	a0,a0,-768 # d00 <main+0x1a4>
 aea:	3cf1                	jal	5c6 <_write.constprop.0>
 aec:	40a2                	lw	ra,8(sp)
 aee:	00140513          	addi	a0,s0,1
 af2:	4412                	lw	s0,4(sp)
 af4:	4482                	lw	s1,0(sp)
 af6:	0131                	addi	sp,sp,12
 af8:	8082                	ret

00000afa <SystemInit>:
 afa:	400227b7          	lui	a5,0x40022
 afe:	4705                	li	a4,1
 b00:	c398                	sw	a4,0(a5)
 b02:	400217b7          	lui	a5,0x40021
 b06:	01080737          	lui	a4,0x1080
 b0a:	0007a223          	sw	zero,4(a5) # 40021004 <__global_pointer$+0x200207ec>
 b0e:	08170713          	addi	a4,a4,129 # 1080081 <lib_swi2c.c.02f2e42d+0x107d3dc>
 b12:	c398                	sw	a4,0(a5)
 b14:	009f0737          	lui	a4,0x9f0
 b18:	c798                	sw	a4,8(a5)
 b1a:	40021737          	lui	a4,0x40021
 b1e:	431c                	lw	a5,0(a4)
 b20:	00679693          	slli	a3,a5,0x6
 b24:	fe06dde3          	bgez	a3,b1e <SystemInit+0x24>
 b28:	435c                	lw	a5,4(a4)
 b2a:	400216b7          	lui	a3,0x40021
 b2e:	9bf1                	andi	a5,a5,-4
 b30:	0027e793          	ori	a5,a5,2
 b34:	c35c                	sw	a5,4(a4)
 b36:	4721                	li	a4,8
 b38:	42dc                	lw	a5,4(a3)
 b3a:	8bb1                	andi	a5,a5,12
 b3c:	fee79ee3          	bne	a5,a4,b38 <SystemInit+0x3e>
 b40:	e00007b7          	lui	a5,0xe0000
 b44:	0f878793          	addi	a5,a5,248 # e00000f8 <__global_pointer$+0xbffff8e0>
 b48:	0007a023          	sw	zero,0(a5)
 b4c:	e00007b7          	lui	a5,0xe0000
 b50:	0f478793          	addi	a5,a5,244 # e00000f4 <__global_pointer$+0xbffff8dc>
 b54:	08000713          	li	a4,128
 b58:	c398                	sw	a4,0(a5)
 b5a:	8082                	ret

00000b5c <main>:
	.address = 0x68,
};


int main()
{
 b5c:	1121                	addi	sp,sp,-24
 b5e:	ca06                	sw	ra,20(sp)
 b60:	c822                	sw	s0,16(sp)
	SystemInit();
 b62:	3f61                	jal	afa <SystemInit>
	gpio_set_rcc(i2c->pin_scl);
 b64:	200005b7          	lui	a1,0x20000
 b68:	00058593          	mv	a1,a1
 b6c:	419c                	lw	a5,0(a1)
	*RCC_APB2PCENR |= (APB2PCENR_AFIO | (APB2PCENR_IOPxEN << byte[0]));
 b6e:	40021737          	lui	a4,0x40021
 b72:	01872303          	lw	t1,24(a4) # 40021018 <__global_pointer$+0x20020800>
 b76:	4691                	li	a3,4
 b78:	00f69633          	sll	a2,a3,a5
 b7c:	00666633          	or	a2,a2,t1
 b80:	00166613          	ori	a2,a2,1
 b84:	cf10                	sw	a2,24(a4)
	gpio_set_rcc(i2c->pin_sda);
 b86:	0045a303          	lw	t1,4(a1) # 20000004 <dev+0x4>
	*RCC_APB2PCENR |= (APB2PCENR_AFIO | (APB2PCENR_IOPxEN << byte[0]));
 b8a:	01872283          	lw	t0,24(a4)
 b8e:	0ff7f513          	zext.b	a0,a5
 b92:	006695b3          	sll	a1,a3,t1
 b96:	0055e5b3          	or	a1,a1,t0
	gpio_port_reg[ byte[0] ]->BSHR = mask;
 b9a:	6285                	lui	t0,0x1
 b9c:	d8028293          	addi	t0,t0,-640 # d80 <gpio_port_reg>
 ba0:	050a                	slli	a0,a0,0x2
	*RCC_APB2PCENR |= (APB2PCENR_AFIO | (APB2PCENR_IOPxEN << byte[0]));
 ba2:	0015e593          	ori	a1,a1,1
	gpio_port_reg[ byte[0] ]->BSHR = mask;
 ba6:	9516                	add	a0,a0,t0
	*RCC_APB2PCENR |= (APB2PCENR_AFIO | (APB2PCENR_IOPxEN << byte[0]));
 ba8:	cf0c                	sw	a1,24(a4)
	gpio_port_reg[ byte[0] ]->BSHR = mask;
 baa:	4108                	lw	a0,0(a0)
	*RCC_APB2PCENR |= (APB2PCENR_AFIO | (APB2PCENR_IOPxEN << byte[0]));
 bac:	0ff37613          	zext.b	a2,t1
	uint32_t mask = 0x01 << byte[1];          // Shift by pin number
 bb0:	83a1                	srli	a5,a5,0x8
 bb2:	4705                	li	a4,1
 bb4:	0ff7f593          	zext.b	a1,a5
	gpio_port_reg[ byte[0] ]->BSHR = mask;
 bb8:	060a                	slli	a2,a2,0x2
	uint32_t mask = 0x01 << byte[1];          // Shift by pin number
 bba:	00f717b3          	sll	a5,a4,a5
	if(state == GPIO_LOW) mask = mask << 16;  // Shift by 16 if LOW, to Reset
 bbe:	07c2                	slli	a5,a5,0x10
	gpio_port_reg[ byte[0] ]->BSHR = mask;
 bc0:	92b2                	add	t0,t0,a2
 bc2:	c91c                	sw	a5,16(a0)
 bc4:	0002a603          	lw	a2,0(t0)
	uint32_t mask = 0x01 << byte[1];          // Shift by pin number
 bc8:	00835793          	srli	a5,t1,0x8
 bcc:	00f71733          	sll	a4,a4,a5
	if(state == GPIO_LOW) mask = mask << 16;  // Shift by 16 if LOW, to Reset
 bd0:	0742                	slli	a4,a4,0x10
	gpio_port_reg[ byte[0] ]->BSHR = mask;
 bd2:	ca18                	sw	a4,16(a2)
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 bd4:	00052283          	lw	t0,0(a0)
	uint32_t mask = 0x01 << byte[1];          // Shift by pin number
 bd8:	0ff7f313          	zext.b	t1,a5
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 bdc:	058a                	slli	a1,a1,0x2
 bde:	47bd                	li	a5,15
 be0:	00b79733          	sll	a4,a5,a1
 be4:	fff74713          	not	a4,a4
		| (mode << (4 * byte[1]));
 be8:	00b695b3          	sll	a1,a3,a1
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 bec:	00577733          	and	a4,a4,t0
		| (mode << (4 * byte[1]));
 bf0:	8f4d                	or	a4,a4,a1
	gpio_port_reg[byte[0]]->CFGLR = 
 bf2:	c118                	sw	a4,0(a0)
		(gpio_port_reg[byte[0]]->CFGLR & ~(0x0F << (4 * byte[1]))) 
 bf4:	4218                	lw	a4,0(a2)
 bf6:	030a                	slli	t1,t1,0x2
 bf8:	006797b3          	sll	a5,a5,t1
 bfc:	fff7c793          	not	a5,a5
 c00:	8ff9                	and	a5,a5,a4
		| (mode << (4 * byte[1]));
 c02:	006696b3          	sll	a3,a3,t1
 c06:	8fd5                	or	a5,a5,a3
	gpio_port_reg[byte[0]]->CFGLR = 
 c08:	c21c                	sw	a5,0(a2)
	return swi2c_stop(i2c);
 c0a:	3c45                	jal	6ba <swi2c_stop.constprop.0.isra.0>

	// Initialise the I2C Bus for the specified pins
	swi2c_init(&dev);

	// Scan the bus for any devices
	printf("----Scanning I2C Bus for Devices---\n");
 c0c:	6505                	lui	a0,0x1
 c0e:	d0450513          	addi	a0,a0,-764 # d04 <main+0x1a8>
 c12:	3d75                	jal	ace <puts>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
 c14:	4401                	li	s0,0
		swi2c_start(i2c);
 c16:	8e3ff0ef          	jal	4f8 <swi2c_start.constprop.0>
		if(swi2c_master_tx_byte(i2c, addr << 1) == I2C_OK) callback(addr);
 c1a:	00141513          	slli	a0,s0,0x1
 c1e:	0fe57513          	andi	a0,a0,254
 c22:	facff0ef          	jal	3ce <swi2c_master_tx_byte.constprop.0>
 c26:	e119                	bnez	a0,c2c <main+0xd0>
 c28:	8522                	mv	a0,s0
 c2a:	35b5                	jal	a96 <i2c_scan_callback>
		swi2c_stop(i2c);
 c2c:	3479                	jal	6ba <swi2c_stop.constprop.0.isra.0>
	for(uint8_t addr = 0x00; addr < 0x7F; addr++)
 c2e:	0405                	addi	s0,s0,1
 c30:	0ff47413          	zext.b	s0,s0
 c34:	07f00793          	li	a5,127
 c38:	fcf41fe3          	bne	s0,a5,c16 <main+0xba>
	swi2c_scan(&dev, i2c_scan_callback);
	printf("----Done Scanning----\n\n");
 c3c:	6505                	lui	a0,0x1
 c3e:	d2850513          	addi	a0,a0,-728 # d28 <main+0x1cc>
 c42:	3571                	jal	ace <puts>
	// This example is specifically for the DS3231 I2C RTC Module.
	// Use this as an example for generic devices, changing Address, speed etc
	i2c_err_t i2c_stat;

	// Write to the -Seconds- Register (Reg 0x00, 0x00 Seconds, one byte)
	i2c_stat = swi2c_master_transmit(&dev, 0x00, (uint8_t[]){0x00}, 1);
 c44:	4585                	li	a1,1
 c46:	850a                	mv	a0,sp
 c48:	00010023          	sb	zero,0(sp)
 c4c:	3601                	jal	74c <swi2c_master_transmit.part.0.constprop.0>
	if(i2c_stat != I2C_OK) { printf("Error Using the I2C Bus\n"); return -1; }
 c4e:	e149                	bnez	a0,cd0 <main+0x174>

	// Example of writing an array to a register.
	uint8_t array[3] = {0x00, 0x01, 0x02};
 c50:	10000793          	li	a5,256
 c54:	00f11423          	sh	a5,8(sp)
 c58:	458d                	li	a1,3
 c5a:	4789                	li	a5,2
 c5c:	0028                	addi	a0,sp,8
 c5e:	00f10523          	sb	a5,10(sp)
	i2c_stat = swi2c_master_transmit(&dev, 0x00, array, 3);
 c62:	34ed                	jal	74c <swi2c_master_transmit.part.0.constprop.0>
	if(i2c_stat != I2C_OK) { printf("Error Using the I2C Bus\n"); return -1; }
 c64:	e535                	bnez	a0,cd0 <main+0x174>

	// Example to read from the I2C Device
	uint8_t seconds = 0;    // Just Seconds (Read as Hex instead od Decimal)
 c66:	000101a3          	sb	zero,3(sp)
	uint8_t time[3] = {0};  // Time in Sec, Min, Hrs (Hex not Decimal)
 c6a:	00011223          	sh	zero,4(sp)
 c6e:	00010323          	sb	zero,6(sp)
	// Loop forever
	while(1)
	{
		// Example reading just one byte
		i2c_stat = swi2c_master_receive(&dev, 0x00, &seconds, 1);
		if(i2c_stat != I2C_OK) printf("Error Using the I2C Bus\n");
 c72:	6405                	lui	s0,0x1
		i2c_stat = swi2c_master_receive(&dev, 0x00, &seconds, 1);
 c74:	4585                	li	a1,1
 c76:	00310513          	addi	a0,sp,3
 c7a:	361d                	jal	7a0 <swi2c_master_receive.part.0.constprop.0>
		if(i2c_stat != I2C_OK) printf("Error Using the I2C Bus\n");
 c7c:	c501                	beqz	a0,c84 <main+0x128>
 c7e:	d4040513          	addi	a0,s0,-704 # d40 <main+0x1e4>
 c82:	35b1                	jal	ace <puts>
		// Print Seconds as a single hex byte
		printf("Seconds: %02X\n", seconds);
 c84:	00314583          	lbu	a1,3(sp)
 c88:	6505                	lui	a0,0x1
 c8a:	d5850513          	addi	a0,a0,-680 # d58 <main+0x1fc>
 c8e:	33cd                	jal	a70 <printf>

		
		// Example reading multiple bytes
		i2c_stat = swi2c_master_receive(&dev, 0x00, time, 3);
 c90:	458d                	li	a1,3
 c92:	0048                	addi	a0,sp,4
 c94:	3631                	jal	7a0 <swi2c_master_receive.part.0.constprop.0>
		if(i2c_stat != I2C_OK) printf("Error Using the I2C Bus\n");
 c96:	c501                	beqz	a0,c9e <main+0x142>
 c98:	d4040513          	addi	a0,s0,-704
 c9c:	3d0d                	jal	ace <puts>
		// Print Time as Hrs Min Sec
		printf("Time: %02X:%02X:%02X\n\n", time[2], time[1], time[0]);
 c9e:	00414683          	lbu	a3,4(sp)
 ca2:	00514603          	lbu	a2,5(sp)
 ca6:	00614583          	lbu	a1,6(sp)
 caa:	6505                	lui	a0,0x1
 cac:	d6850513          	addi	a0,a0,-664 # d68 <main+0x20c>
 cb0:	33c1                	jal	a70 <printf>
#endif

void DelaySysTick( uint32_t n )
{
#ifdef CH32V003
	uint32_t targend = SysTick->CNT + n;
 cb2:	e000f7b7          	lui	a5,0xe000f
 cb6:	4798                	lw	a4,8(a5)
 cb8:	02dc77b7          	lui	a5,0x2dc7
 cbc:	c0078793          	addi	a5,a5,-1024 # 2dc6c00 <lib_swi2c.c.02f2e42d+0x2dc3f5b>
 cc0:	973e                	add	a4,a4,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
 cc2:	e000f6b7          	lui	a3,0xe000f
 cc6:	469c                	lw	a5,8(a3)
 cc8:	8f99                	sub	a5,a5,a4
 cca:	fe07cee3          	bltz	a5,cc6 <main+0x16a>
 cce:	b75d                	j	c74 <main+0x118>
	if(i2c_stat != I2C_OK) { printf("Error Using the I2C Bus\n"); return -1; }
 cd0:	6505                	lui	a0,0x1
 cd2:	d4050513          	addi	a0,a0,-704 # d40 <main+0x1e4>
 cd6:	3be5                	jal	ace <puts>


		// Wait 1 Second
		Delay_Ms(1000);
	}}
 cd8:	40d2                	lw	ra,20(sp)
 cda:	4442                	lw	s0,16(sp)
 cdc:	557d                	li	a0,-1
 cde:	0161                	addi	sp,sp,24
 ce0:	8082                	ret
 ce2:	0000                	unimp
 ce4:	6441                	lui	s0,0x10
 ce6:	7264                	.insn	2, 0x7264
 ce8:	7365                	lui	t1,0xffff9
 cea:	30203a73          	csrrc	s4,medeleg,zero
 cee:	2578                	.insn	2, 0x2578
 cf0:	3230                	.insn	2, 0x3230
 cf2:	2058                	.insn	2, 0x2058
 cf4:	6552                	.insn	2, 0x6552
 cf6:	6e6f7073          	csrci	0x6e6,30
 cfa:	6564                	.insn	2, 0x6564
 cfc:	2e64                	.insn	2, 0x2e64
 cfe:	000a                	c.slli	zero,0x2
 d00:	000a                	c.slli	zero,0x2
 d02:	0000                	unimp
 d04:	2d2d                	jal	133e <_data_lma+0x5ae>
 d06:	2d2d                	jal	1340 <_data_lma+0x5b0>
 d08:	6e616353          	.insn	4, 0x6e616353
 d0c:	696e                	.insn	2, 0x696e
 d0e:	676e                	.insn	2, 0x676e
 d10:	4920                	lw	s0,80(a0)
 d12:	4332                	lw	t1,12(sp)
 d14:	4220                	lw	s0,64(a2)
 d16:	7375                	lui	t1,0xffffd
 d18:	6620                	.insn	2, 0x6620
 d1a:	4420726f          	jal	tp,815c <lib_swi2c.c.02f2e42d+0x54b7>
 d1e:	7665                	lui	a2,0xffff9
 d20:	6369                	lui	t1,0x1a
 d22:	7365                	lui	t1,0xffff9
 d24:	2d2d                	jal	135e <_data_lma+0x5ce>
 d26:	002d                	c.nop	11
 d28:	2d2d                	jal	1362 <_data_lma+0x5d2>
 d2a:	2d2d                	jal	1364 <_data_lma+0x5d4>
 d2c:	6f44                	.insn	2, 0x6f44
 d2e:	656e                	.insn	2, 0x656e
 d30:	5320                	lw	s0,96(a4)
 d32:	6e6e6163          	bltu	t3,t1,1414 <_data_lma+0x684>
 d36:	6e69                	lui	t3,0x1a
 d38:	2d2d2d67          	.insn	4, 0x2d2d2d67
 d3c:	0a2d                	addi	s4,s4,11
 d3e:	0000                	unimp
 d40:	7245                	lui	tp,0xffff1
 d42:	6f72                	.insn	2, 0x6f72
 d44:	2072                	.insn	2, 0x2072
 d46:	7355                	lui	t1,0xffff5
 d48:	6e69                	lui	t3,0x1a
 d4a:	68742067          	.insn	4, 0x68742067
 d4e:	2065                	jal	df6 <_data_lma+0x66>
 d50:	3249                	jal	6d2 <swi2c_stop.constprop.0.isra.0+0x18>
 d52:	75422043          	.insn	4, 0x75422043
 d56:	65530073          	.insn	4, 0x65530073
 d5a:	646e6f63          	bltu	t3,t1,13b8 <_data_lma+0x628>
 d5e:	25203a73          	csrrc	s4,0x252,zero
 d62:	3230                	.insn	2, 0x3230
 d64:	0a58                	addi	a4,sp,276
 d66:	0000                	unimp
 d68:	6954                	.insn	2, 0x6954
 d6a:	656d                	lui	a0,0x1b
 d6c:	203a                	.insn	2, 0x203a
 d6e:	3025                	jal	596 <swi2c_start.constprop.0+0x9e>
 d70:	5832                	lw	a6,44(sp)
 d72:	253a                	.insn	2, 0x253a
 d74:	3230                	.insn	2, 0x3230
 d76:	3a58                	.insn	2, 0x3a58
 d78:	3025                	jal	5a0 <swi2c_start.constprop.0+0xa8>
 d7a:	5832                	lw	a6,44(sp)
 d7c:	0a0a                	slli	s4,s4,0x2
	...

00000d80 <gpio_port_reg>:
 d80:	0800 4001 0000 0000 1000 4001 1400 4001     ...@.......@...@
