
i2ctest.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
   0:	1f80006f          	j	1f8 <handle_reset>
   4:	00000000          	.word	0x00000000
   8:	00000268          	.word	0x00000268
   c:	00000266          	.word	0x00000266
	...
  30:	00000266          	.word	0x00000266
  34:	00000000          	.word	0x00000000
  38:	00000266          	.word	0x00000266
  3c:	00000000          	.word	0x00000000
  40:	00000266          	.word	0x00000266
  44:	00000266          	.word	0x00000266
  48:	00000266          	.word	0x00000266
  4c:	00000266          	.word	0x00000266
  50:	00000266          	.word	0x00000266
  54:	00000266          	.word	0x00000266
  58:	00000266          	.word	0x00000266
  5c:	00000266          	.word	0x00000266
  60:	00000266          	.word	0x00000266
  64:	00000266          	.word	0x00000266
  68:	00000266          	.word	0x00000266
  6c:	00000266          	.word	0x00000266
  70:	00000266          	.word	0x00000266
  74:	00000266          	.word	0x00000266
  78:	00000266          	.word	0x00000266
  7c:	00000266          	.word	0x00000266
  80:	00000266          	.word	0x00000266
  84:	00000266          	.word	0x00000266
  88:	00000266          	.word	0x00000266
  8c:	00000266          	.word	0x00000266
  90:	00000266          	.word	0x00000266
  94:	00000266          	.word	0x00000266
  98:	00000266          	.word	0x00000266
  9c:	0000                	.insn	2, 0x
	...

Disassembly of section .text:

000000a0 <gpio_set_mode>:
	
	// Make array of uint8_t from [pin] enum. See definition for details
	uint8_t *byte = (uint8_t *)&pin;
	
	// Set the RCC Register to enable clock on the specified port
	*RCC_APB2PCENR |= (APB2PCENR_AFIO | (APB2PCENR_IOPxEN << byte[0]));
  a0:	40021737          	lui	a4,0x40021
  a4:	4f10                	lw	a2,24(a4)
  a6:	4791                	li	a5,4
  a8:	00a797b3          	sll	a5,a5,a0
  ac:	8fd1                	or	a5,a5,a2
  ae:	0017e793          	ori	a5,a5,1
  b2:	cf1c                	sw	a5,24(a4)
  b4:	0ff57693          	zext.b	a3,a0

	// Clear then set the GPIO Config Register
	gpio_port_reg[ byte[0] ]->CFGLR &=        ~(0x0F  << (4 * byte[1]));
  b8:	00269713          	slli	a4,a3,0x2
  bc:	38800793          	li	a5,904
  c0:	97ba                	add	a5,a5,a4
  c2:	4398                	lw	a4,0(a5)
  c4:	8119                	srli	a0,a0,0x6
  c6:	3fc57513          	andi	a0,a0,1020
  ca:	4314                	lw	a3,0(a4)
  cc:	47bd                	li	a5,15
  ce:	00a797b3          	sll	a5,a5,a0
  d2:	fff7c793          	not	a5,a5
  d6:	8ff5                	and	a5,a5,a3
  d8:	c31c                	sw	a5,0(a4)
	gpio_port_reg[ byte[0] ]->CFGLR |=  (mode & 0x0F) << (4 * byte[1]);
  da:	431c                	lw	a5,0(a4)
  dc:	00a595b3          	sll	a1,a1,a0
  e0:	8ddd                	or	a1,a1,a5
  e2:	c30c                	sw	a1,0(a4)

	// If [mode] is INPUT_PULLUP or INPUT_PULLDOWN, set the [OUTDR] Register
	if(mode == INPUT_PULLUP || mode == INPUT_PULLDOWN)
		gpio_digital_write(pin, mode >> 4);
}
  e4:	8082                	ret

000000e6 <clk_stretch>:
	if( (gpio_port_reg[ byte[0] ]->INDR & (0x01 << byte[1])) != 0x00 ) 
  e6:	0ff57713          	zext.b	a4,a0
  ea:	070a                	slli	a4,a4,0x2
  ec:	38800793          	li	a5,904
  f0:	97ba                	add	a5,a5,a4
  f2:	8121                	srli	a0,a0,0x8
  f4:	4705                	li	a4,1
  f6:	4390                	lw	a2,0(a5)
  f8:	00a71733          	sll	a4,a4,a0


static i2c_err_t clk_stretch(const gpio_pin_t scl)
{
	uint8_t clock_waits = 10;
	while(gpio_digital_read(scl) == GPIO_LOW)
  fc:	47ad                	li	a5,11
	if( (gpio_port_reg[ byte[0] ]->INDR & (0x01 << byte[1])) != 0x00 ) 
  fe:	4614                	lw	a3,8(a2)
 100:	8ef9                	and	a3,a3,a4
 102:	e699                	bnez	a3,110 <clk_stretch+0x2a>
	{
		if(!clock_waits--) return I2C_ERR_TIMEOUT;
 104:	17fd                	addi	a5,a5,-1
 106:	0ff7f793          	zext.b	a5,a5
 10a:	fbf5                	bnez	a5,fe <clk_stretch+0x18>
 10c:	4505                	li	a0,1
 10e:	8082                	ret
		wait();
	}

	return I2C_OK;
 110:	4501                	li	a0,0
}
 112:	8082                	ret

00000114 <swi2c_master_tx_byte.constprop.0>:
	
	i2c->_active = false;
	return stat;
}

i2c_err_t swi2c_master_tx_byte(i2c_bus_t *i2c, uint8_t data)
 114:	1141                	addi	sp,sp,-16
 116:	c422                	sw	s0,8(sp)
 118:	c226                	sw	s1,4(sp)
 11a:	c606                	sw	ra,12(sp)
 11c:	842a                	mv	s0,a0
 11e:	44a1                	li	s1,8
		RELEASE_SDA;
 120:	200007b7          	lui	a5,0x20000
 124:	00078793          	mv	a5,a5
 128:	43c8                	lw	a0,4(a5)
	if(bit)
 12a:	01841793          	slli	a5,s0,0x18
 12e:	87e1                	srai	a5,a5,0x18
		RELEASE_SDA;
 130:	4591                	li	a1,4
	if(bit)
 132:	0007c363          	bltz	a5,138 <swi2c_master_tx_byte.constprop.0+0x24>
		ASSERT_SDA;
 136:	4585                	li	a1,1
 138:	37a5                	jal	a0 <gpio_set_mode>
	RELEASE_SCL;   // SCL HIGH
 13a:	200007b7          	lui	a5,0x20000
 13e:	00078793          	mv	a5,a5
 142:	439c                	lw	a5,0(a5)
 144:	4591                	li	a1,4
	// Transmit bits MSB First
	uint8_t index = 8;
	while(index--)
	{
		master_tx_bit(i2c, data & 0x80);
		data = data << 1;
 146:	0406                	slli	s0,s0,0x1
	RELEASE_SCL;   // SCL HIGH
 148:	853e                	mv	a0,a5
 14a:	c03e                	sw	a5,0(sp)
 14c:	3f91                	jal	a0 <gpio_set_mode>
	i2c_err_t stat = clk_stretch(i2c->pin_scl);
 14e:	4502                	lw	a0,0(sp)
		data = data << 1;
 150:	0ff47413          	zext.b	s0,s0
	i2c_err_t stat = clk_stretch(i2c->pin_scl);
 154:	3f49                	jal	e6 <clk_stretch>
	ASSERT_SCL;   // SCL LOW
 156:	4502                	lw	a0,0(sp)
 158:	4585                	li	a1,1
 15a:	3799                	jal	a0 <gpio_set_mode>
	while(index--)
 15c:	fff48793          	addi	a5,s1,-1
 160:	0ff7f493          	zext.b	s1,a5
 164:	fcd5                	bnez	s1,120 <swi2c_master_tx_byte.constprop.0+0xc>
	RELEASE_SDA;
 166:	20000437          	lui	s0,0x20000
 16a:	00040793          	mv	a5,s0
 16e:	43c4                	lw	s1,4(a5)
 170:	4591                	li	a1,4
 172:	8526                	mv	a0,s1
 174:	3735                	jal	a0 <gpio_set_mode>
	RELEASE_SCL;
 176:	00040793          	mv	a5,s0
 17a:	439c                	lw	a5,0(a5)
 17c:	4591                	li	a1,4
	bool bit = 0;
 17e:	4401                	li	s0,0
	RELEASE_SCL;
 180:	853e                	mv	a0,a5
 182:	c03e                	sw	a5,0(sp)
 184:	3f31                	jal	a0 <gpio_set_mode>
	if(clk_stretch(i2c->pin_scl) == I2C_OK)
 186:	4502                	lw	a0,0(sp)
 188:	3fb9                	jal	e6 <clk_stretch>
 18a:	e10d                	bnez	a0,1ac <swi2c_master_tx_byte.constprop.0+0x98>
	if( (gpio_port_reg[ byte[0] ]->INDR & (0x01 << byte[1])) != 0x00 ) 
 18c:	0ff4f693          	zext.b	a3,s1
 190:	068a                	slli	a3,a3,0x2
 192:	38800713          	li	a4,904
 196:	9736                	add	a4,a4,a3
 198:	4318                	lw	a4,0(a4)
 19a:	0084d793          	srli	a5,s1,0x8
 19e:	4405                	li	s0,1
 1a0:	4718                	lw	a4,8(a4)
 1a2:	00f41433          	sll	s0,s0,a5
 1a6:	8c79                	and	s0,s0,a4
 1a8:	00803433          	snez	s0,s0
	ASSERT_SCL; // SCL LOW
 1ac:	4502                	lw	a0,0(sp)
 1ae:	4585                	li	a1,1
 1b0:	3dc5                	jal	a0 <gpio_set_mode>
	}
	
	// Read ACK bit (0 = ACK, 1 = NACK)
	if( (stat = master_rx_bit(i2c)) == 0x01) stat = I2C_ERR_NACK;
	return stat;
}
 1b2:	40b2                	lw	ra,12(sp)
 1b4:	00141513          	slli	a0,s0,0x1
 1b8:	4422                	lw	s0,8(sp)
 1ba:	4492                	lw	s1,4(sp)
 1bc:	0141                	addi	sp,sp,16
 1be:	8082                	ret

000001c0 <swi2c_stop.constprop.0.isra.0>:
i2c_err_t swi2c_stop(i2c_bus_t *i2c)
 1c0:	1141                	addi	sp,sp,-16
 1c2:	c422                	sw	s0,8(sp)
	ASSERT_SDA;     // SDA LOW 
 1c4:	20000437          	lui	s0,0x20000
 1c8:	00040413          	mv	s0,s0
i2c_err_t swi2c_stop(i2c_bus_t *i2c)
 1cc:	c226                	sw	s1,4(sp)
	ASSERT_SDA;     // SDA LOW 
 1ce:	4044                	lw	s1,4(s0)
 1d0:	4585                	li	a1,1
i2c_err_t swi2c_stop(i2c_bus_t *i2c)
 1d2:	c606                	sw	ra,12(sp)
	ASSERT_SDA;     // SDA LOW 
 1d4:	8526                	mv	a0,s1
 1d6:	35e9                	jal	a0 <gpio_set_mode>
	RELEASE_SCL;    // SCL HIGH
 1d8:	4008                	lw	a0,0(s0)
 1da:	4591                	li	a1,4
 1dc:	c02a                	sw	a0,0(sp)
 1de:	35c9                	jal	a0 <gpio_set_mode>
	stat = clk_stretch(i2c->pin_scl);
 1e0:	4502                	lw	a0,0(sp)
 1e2:	3711                	jal	e6 <clk_stretch>
	RELEASE_SDA;    // SDA HIGH
 1e4:	8526                	mv	a0,s1
 1e6:	4591                	li	a1,4
 1e8:	3d65                	jal	a0 <gpio_set_mode>
}
 1ea:	40b2                	lw	ra,12(sp)
	i2c->_active = false;
 1ec:	00040623          	sb	zero,12(s0) # 2000000c <bus+0xc>
}
 1f0:	4422                	lw	s0,8(sp)
 1f2:	4492                	lw	s1,4(sp)
 1f4:	0141                	addi	sp,sp,16
 1f6:	8082                	ret

000001f8 <handle_reset>:
 1f8:	20000197          	auipc	gp,0x20000
 1fc:	61818193          	addi	gp,gp,1560 # 20000810 <__global_pointer$>
 200:	ff018113          	addi	sp,gp,-16 # 20000800 <_eusrstack>
 204:	08000513          	li	a0,128
 208:	30051073          	csrw	mstatus,a0
 20c:	468d                	li	a3,3
 20e:	00000517          	auipc	a0,0x0
 212:	df250513          	addi	a0,a0,-526 # 0 <InterruptVector>
 216:	8d55                	or	a0,a0,a3
 218:	30551073          	csrw	mtvec,a0
 21c:	80818513          	addi	a0,gp,-2040 # 20000018 <_ebss>
 220:	80818593          	addi	a1,gp,-2040 # 20000018 <_ebss>
 224:	4601                	li	a2,0
 226:	00b55663          	bge	a0,a1,232 <handle_reset+0x3a>
 22a:	c110                	sw	a2,0(a0)
 22c:	0511                	addi	a0,a0,4
 22e:	feb54ee3          	blt	a0,a1,22a <handle_reset+0x32>
 232:	39800513          	li	a0,920
 236:	20000597          	auipc	a1,0x20000
 23a:	dca58593          	addi	a1,a1,-566 # 20000000 <bus>
 23e:	80818613          	addi	a2,gp,-2040 # 20000018 <_ebss>
 242:	00c58863          	beq	a1,a2,252 <handle_reset+0x5a>
 246:	4114                	lw	a3,0(a0)
 248:	c194                	sw	a3,0(a1)
 24a:	0511                	addi	a0,a0,4
 24c:	0591                	addi	a1,a1,4
 24e:	fec59ae3          	bne	a1,a2,242 <handle_reset+0x4a>
 252:	e000f7b7          	lui	a5,0xe000f
 256:	4715                	li	a4,5
 258:	c398                	sw	a4,0(a5)
 25a:	2d800793          	li	a5,728
 25e:	34179073          	csrw	mepc,a5
 262:	30200073          	mret

00000266 <ADC1_IRQHandler>:
 266:	a001                	j	266 <ADC1_IRQHandler>

00000268 <NMI_Handler>:
 268:	40021737          	lui	a4,0x40021
 26c:	471c                	lw	a5,8(a4)
 26e:	008006b7          	lui	a3,0x800
 272:	8fd5                	or	a5,a5,a3
 274:	c71c                	sw	a5,8(a4)

00000276 <SystemInit>:
 276:	400227b7          	lui	a5,0x40022
 27a:	4705                	li	a4,1
 27c:	c398                	sw	a4,0(a5)
 27e:	400217b7          	lui	a5,0x40021
 282:	01080737          	lui	a4,0x1080
 286:	0007a223          	sw	zero,4(a5) # 40021004 <__global_pointer$+0x200207f4>
 28a:	08170713          	addi	a4,a4,129 # 1080081 <lib_swi2c.c.30364d94+0x107dd14>
 28e:	c398                	sw	a4,0(a5)
 290:	009f0737          	lui	a4,0x9f0
 294:	c798                	sw	a4,8(a5)
 296:	40021737          	lui	a4,0x40021
 29a:	431c                	lw	a5,0(a4)
 29c:	00679693          	slli	a3,a5,0x6
 2a0:	fe06dde3          	bgez	a3,29a <SystemInit+0x24>
 2a4:	435c                	lw	a5,4(a4)
 2a6:	400216b7          	lui	a3,0x40021
 2aa:	9bf1                	andi	a5,a5,-4
 2ac:	0027e793          	ori	a5,a5,2
 2b0:	c35c                	sw	a5,4(a4)
 2b2:	4721                	li	a4,8
 2b4:	42dc                	lw	a5,4(a3)
 2b6:	8bb1                	andi	a5,a5,12
 2b8:	fee79ee3          	bne	a5,a4,2b4 <SystemInit+0x3e>
 2bc:	e00007b7          	lui	a5,0xe0000
 2c0:	0f878793          	addi	a5,a5,248 # e00000f8 <__global_pointer$+0xbffff8e8>
 2c4:	0007a023          	sw	zero,0(a5)
 2c8:	e00007b7          	lui	a5,0xe0000
 2cc:	0f478793          	addi	a5,a5,244 # e00000f4 <__global_pointer$+0xbffff8e4>
 2d0:	08000713          	li	a4,128
 2d4:	c398                	sw	a4,0(a5)
 2d6:	8082                	ret

000002d8 <main>:
};

uint8_t data[4] = {0x1B, 0x55, 0xaa, 0xee};

int main()
{
 2d8:	1141                	addi	sp,sp,-16
 2da:	c606                	sw	ra,12(sp)
 2dc:	c422                	sw	s0,8(sp)
 2de:	c226                	sw	s1,4(sp)
	gpio_digital_write(i2c->pin_scl, GPIO_LOW);
 2e0:	20000437          	lui	s0,0x20000
	SystemInit();
 2e4:	3f49                	jal	276 <SystemInit>
 2e6:	00040613          	mv	a2,s0
 2ea:	421c                	lw	a5,0(a2)
		gpio_port_reg[ byte[0] ]->OUTDR &= ~(0x01 << byte[1]);
 2ec:	38800693          	li	a3,904
 2f0:	0ff7f713          	zext.b	a4,a5
 2f4:	070a                	slli	a4,a4,0x2
 2f6:	9736                	add	a4,a4,a3
 2f8:	430c                	lw	a1,0(a4)
 2fa:	83a1                	srli	a5,a5,0x8
 2fc:	4705                	li	a4,1
 2fe:	45c8                	lw	a0,12(a1)
 300:	00f717b3          	sll	a5,a4,a5
 304:	fff7c793          	not	a5,a5
 308:	8fe9                	and	a5,a5,a0
 30a:	c5dc                	sw	a5,12(a1)
	gpio_digital_write(i2c->pin_sda, GPIO_LOW);
 30c:	425c                	lw	a5,4(a2)
 30e:	00040413          	mv	s0,s0
 312:	200004b7          	lui	s1,0x20000
		gpio_port_reg[ byte[0] ]->OUTDR &= ~(0x01 << byte[1]);
 316:	0ff7f613          	zext.b	a2,a5
 31a:	060a                	slli	a2,a2,0x2
 31c:	96b2                	add	a3,a3,a2
 31e:	4294                	lw	a3,0(a3)
 320:	83a1                	srli	a5,a5,0x8
 322:	00f71733          	sll	a4,a4,a5
 326:	46d0                	lw	a2,12(a3)
 328:	fff74713          	not	a4,a4
 32c:	8f71                	and	a4,a4,a2
 32e:	c6d8                	sw	a4,12(a3)
	return swi2c_stop(i2c);
 330:	3d41                	jal	1c0 <swi2c_stop.constprop.0.isra.0>
	if(i2c->_active)
 332:	00c44783          	lbu	a5,12(s0) # 2000000c <bus+0xc>
		RELEASE_SDA;    // SDA HIGH
 336:	4048                	lw	a0,4(s0)
	if(i2c->_active)
 338:	e385                	bnez	a5,358 <main+0x80>
	ASSERT_SDA;        // SDA LOW
 33a:	4048                	lw	a0,4(s0)
 33c:	4585                	li	a1,1
 33e:	338d                	jal	a0 <gpio_set_mode>
	ASSERT_SCL;        // SCL LOW
 340:	4008                	lw	a0,0(s0)
 342:	4585                	li	a1,1
 344:	3bb1                	jal	a0 <gpio_set_mode>
	i2c->_active = true;
 346:	4785                	li	a5,1
	i2c_err_t stat = I2C_OK;

	// Gaurd each step from failure
	// Send START Condition and address byte
	if( (stat = swi2c_start(i2c)) == I2C_OK && 
		(stat = swi2c_master_tx_byte(i2c, addr)) == I2C_OK)
 348:	0d000513          	li	a0,208
	i2c->_active = true;
 34c:	00f40623          	sb	a5,12(s0)
		(stat = swi2c_master_tx_byte(i2c, addr)) == I2C_OK)
 350:	33d1                	jal	114 <swi2c_master_tx_byte.constprop.0>
	if( (stat = swi2c_start(i2c)) == I2C_OK && 
 352:	cd09                	beqz	a0,36c <main+0x94>
			swi2c_master_tx_byte(i2c, *data);
			++data;
		}
	}

	swi2c_stop(i2c);
 354:	35b5                	jal	1c0 <swi2c_stop.constprop.0.isra.0>

	swi2c_init(&bus);
	while (1)
 356:	bff1                	j	332 <main+0x5a>
		RELEASE_SDA;    // SDA HIGH
 358:	4591                	li	a1,4
 35a:	3399                	jal	a0 <gpio_set_mode>
		RELEASE_SCL;    // SCL HIGH
 35c:	4008                	lw	a0,0(s0)
 35e:	4591                	li	a1,4
 360:	c02a                	sw	a0,0(sp)
 362:	3b3d                	jal	a0 <gpio_set_mode>
		if( (stat = clk_stretch(i2c->pin_scl)) != I2C_OK) return stat;
 364:	4502                	lw	a0,0(sp)
 366:	3341                	jal	e6 <clk_stretch>
 368:	d969                	beqz	a0,33a <main+0x62>
 36a:	b7ed                	j	354 <main+0x7c>
 36c:	01048793          	addi	a5,s1,16 # 20000010 <data>
			swi2c_master_tx_byte(i2c, *data);
 370:	0007c503          	lbu	a0,0(a5)
 374:	c03e                	sw	a5,0(sp)
 376:	3b79                	jal	114 <swi2c_master_tx_byte.constprop.0>
			++data;
 378:	4782                	lw	a5,0(sp)
		while(size--)
 37a:	80418713          	addi	a4,gp,-2044 # 20000014 <data+0x4>
			++data;
 37e:	0785                	addi	a5,a5,1
		while(size--)
 380:	fee798e3          	bne	a5,a4,370 <main+0x98>
 384:	bfc1                	j	354 <main+0x7c>
	...

00000388 <gpio_port_reg>:
 388:	0800 4001 0000 0000 1000 4001 1400 4001     ...@.......@...@
